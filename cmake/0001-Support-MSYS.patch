From ddae354dfad5b98abbb3f4e0f8cb78c569459acd Mon Sep 17 00:00:00 2001
From: Orgad Shaneh <orgads@gmail.com>
Date: Wed, 24 Mar 2021 14:07:50 +0200
Subject: [PATCH] Support MSYS

Imported from MSYS2 patch.
---
 CMakeCPack.cmake                              |  6 +-
 Modules/CMakeCCompiler.cmake.in               |  5 ++
 Modules/CMakeCXXCompiler.cmake.in             |  5 ++
 Modules/CMakeDetermineCCompiler.cmake         |  2 +
 Modules/CMakeDetermineCXXCompiler.cmake       |  2 +
 Modules/CMakeDetermineFortranCompiler.cmake   |  8 ++
 Modules/CMakeDetermineSystem.cmake            |  8 +-
 Modules/CMakeFortranCompiler.cmake.in         |  6 ++
 Modules/CMakeFortranCompilerId.F.in           |  2 +
 Modules/CMakeJavaInformation.cmake            |  2 +-
 Modules/CMakePlatformId.h.in                  |  3 +
 Modules/CMakeSystemSpecificInformation.cmake  |  1 +
 Modules/CMakeTestGNU.c                        |  4 +-
 Modules/CPack.cmake                           |  7 ++
 Modules/CPackMsys.cmake                       | 33 ++++++++
 Modules/ExternalProject.cmake                 |  2 +-
 Modules/FindBoost.cmake                       |  2 +-
 Modules/FindCoin3D.cmake                      |  2 +-
 Modules/FindCurses.cmake                      |  2 +-
 Modules/FindFLTK.cmake                        |  2 +-
 Modules/FindFLTK2.cmake                       |  2 +-
 Modules/FindGnuplot.cmake                     |  2 +
 Modules/FindMsys.cmake                        | 28 +++++++
 Modules/FindOpenSSL.cmake                     |  2 +-
 Modules/FindPNG.cmake                         |  2 +-
 Modules/FindPerl.cmake                        |  2 +
 Modules/FindPythonLibs.cmake                  |  2 +-
 Modules/FindQt3.cmake                         |  2 +-
 Modules/FindSelfPackers.cmake                 |  3 +
 Modules/FindThreads.cmake                     |  2 +-
 Modules/FindUnixCommands.cmake                |  7 ++
 Modules/FindWget.cmake                        |  2 +
 Modules/GenerateExportHeader.cmake            |  3 +-
 Modules/KDE3Macros.cmake                      |  2 +-
 Modules/Platform/MSYS-Clang-C.cmake           |  1 +
 Modules/Platform/MSYS-Clang-CXX.cmake         |  1 +
 Modules/Platform/MSYS-Determine-CXX.cmake     |  7 ++
 Modules/Platform/MSYS-GNU-C.cmake             |  2 +
 Modules/Platform/MSYS-GNU-CXX.cmake           |  2 +
 Modules/Platform/MSYS-GNU-Fortran.cmake       |  2 +
 Modules/Platform/MSYS-GNU.cmake               | 54 +++++++++++++
 Modules/Platform/MSYS-windres.cmake           |  1 +
 Modules/Platform/MSYS.cmake                   | 75 +++++++++++++++++++
 Modules/Platform/Windows-GNU.cmake            |  8 +-
 Modules/UseJava.cmake                         |  2 +-
 Modules/UseSWIG.cmake                         |  4 +-
 Source/CMakeInstallDestinations.cmake         |  2 +-
 Source/CMakeLists.txt                         | 10 +--
 Source/Modules/FindLibUUID.cmake              | 10 +++
 Source/cmExtraEclipseCDT4Generator.cxx        |  2 +-
 Source/cmLocalGenerator.cxx                   |  2 +-
 Source/kwsys/CMakeLists.txt                   |  4 +-
 Tests/CMakeLists.txt                          | 16 ++--
 .../CheckCXXCompilerFlag/CMakeLists.txt       |  2 +-
 .../CMakeTests/ImplicitLinkInfoTest.cmake.in  | 20 ++---
 Tests/Complex/Library/CMakeLists.txt          |  2 +-
 Tests/ComplexOneConfig/Library/CMakeLists.txt |  2 +-
 Tests/ExternalProject/CMakeLists.txt          |  4 +-
 Tests/FindPackageTest/CMakeLists.txt          |  2 +-
 Tests/Fortran/CMakeLists.txt                  |  2 +-
 Tests/IncludeDirectories/CMakeLists.txt       |  2 +-
 Tests/Jump/Library/Shared/CMakeLists.txt      |  2 +-
 Tests/PerConfig/CMakeLists.txt                |  2 +-
 Tests/RunCMake/CMakeLists.txt                 |  2 +-
 Tests/RunCMake/CommandLine/RunCMakeTest.cmake |  2 +-
 .../GenerateExportHeader/GEH-failures.cmake   |  2 +-
 Tests/RunCMake/GenerateExportHeader/GEH.cmake |  4 +-
 Tests/RunCMake/file/RunCMakeTest.cmake        |  2 +-
 .../RunCMake/find_program/RunCMakeTest.cmake  |  2 +-
 .../TARGETS-Defaults-Cache-all-check.cmake    | 16 ++++
 .../install/TARGETS-Defaults-all-check.cmake  | 18 +++++
 ...TARGETS-NAMELINK_COMPONENT-all-check.cmake | 10 +++
 ...TARGETS-NAMELINK_COMPONENT-dev-check.cmake |  2 +-
 ...TARGETS-NAMELINK_COMPONENT-lib-check.cmake |  8 ++
 ...TARGETS-NAMELINK_COMPONENT-uns-check.cmake |  6 ++
 .../TARGETS-OUTPUT_NAME-all-check.cmake       |  2 +
 Utilities/cmlibarchive/CMakeLists.txt         | 26 +++----
 .../cmlibarchive/libarchive/CMakeLists.txt    |  8 +-
 Utilities/cmlibuv/CMakeLists.txt              |  2 +-
 bootstrap                                     | 14 +++-
 80 files changed, 448 insertions(+), 88 deletions(-)
 create mode 100644 Modules/CPackMsys.cmake
 create mode 100644 Modules/FindMsys.cmake
 create mode 100644 Modules/Platform/MSYS-Clang-C.cmake
 create mode 100644 Modules/Platform/MSYS-Clang-CXX.cmake
 create mode 100644 Modules/Platform/MSYS-Determine-CXX.cmake
 create mode 100644 Modules/Platform/MSYS-GNU-C.cmake
 create mode 100644 Modules/Platform/MSYS-GNU-CXX.cmake
 create mode 100644 Modules/Platform/MSYS-GNU-Fortran.cmake
 create mode 100644 Modules/Platform/MSYS-GNU.cmake
 create mode 100644 Modules/Platform/MSYS-windres.cmake
 create mode 100644 Modules/Platform/MSYS.cmake

diff --git a/CMakeCPack.cmake b/CMakeCPack.cmake
index 31c2fe4561..891e00f36e 100644
--- a/CMakeCPack.cmake
+++ b/CMakeCPack.cmake
@@ -41,6 +41,8 @@ if(NOT DEFINED CPACK_SYSTEM_NAME)
   # cygwin is good for the system name
   if("x${CMAKE_SYSTEM_NAME}" STREQUAL "xCYGWIN")
     set(CPACK_SYSTEM_NAME Cygwin)
+  elseif("x${CMAKE_SYSTEM_NAME}" STREQUAL "xMSYS")
+    set(CPACK_SYSTEM_NAME MSYS)
   else()
     set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
   endif()
@@ -99,7 +101,7 @@ set(${_cpifwrc}LICENSES_DEFAULT
 # Components
 if(CMake_INSTALL_COMPONENTS)
   set(_CPACK_IFW_COMPONENTS_ALL cmake ctest cpack)
-  if(WIN32 AND NOT CYGWIN)
+  if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       list(APPEND _CPACK_IFW_COMPONENTS_ALL cmcldeps)
   endif()
   if(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME)
@@ -207,7 +209,7 @@ if(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
   # if the CPACK_PACKAGE_FILE_NAME is not defined by the cache
   # default to source package - system, on cygwin system is not
   # needed
-  if(CYGWIN)
+  if(CYGWIN OR MSYS)
     set(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}")
   else()
     set(CPACK_PACKAGE_FILE_NAME
diff --git a/Modules/CMakeCCompiler.cmake.in b/Modules/CMakeCCompiler.cmake.in
index 7f73891faf..cfc6069546 100644
--- a/Modules/CMakeCCompiler.cmake.in
+++ b/Modules/CMakeCCompiler.cmake.in
@@ -30,10 +30,15 @@ set(CMAKE_C_COMPILER_WORKS @CMAKE_C_COMPILER_WORKS@)
 set(CMAKE_C_ABI_COMPILED @CMAKE_C_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
+if(CMAKE_COMPILER_IS_MSYS)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
 
 set(CMAKE_C_COMPILER_ENV_VAR "CC")
 
diff --git a/Modules/CMakeCXXCompiler.cmake.in b/Modules/CMakeCXXCompiler.cmake.in
index 45acfe732b..f54fe749fe 100644
--- a/Modules/CMakeCXXCompiler.cmake.in
+++ b/Modules/CMakeCXXCompiler.cmake.in
@@ -33,10 +33,15 @@ set(CMAKE_CXX_COMPILER_WORKS @CMAKE_CXX_COMPILER_WORKS@)
 set(CMAKE_CXX_ABI_COMPILED @CMAKE_CXX_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
+if(CMAKE_COMPILER_IS_MSYS)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
 
 set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")
 
diff --git a/Modules/CMakeDetermineCCompiler.cmake b/Modules/CMakeDetermineCCompiler.cmake
index cd07ba983b..d55e13d167 100644
--- a/Modules/CMakeDetermineCCompiler.cmake
+++ b/Modules/CMakeDetermineCCompiler.cmake
@@ -127,6 +127,8 @@ if(NOT CMAKE_C_COMPILER_ID_RUN)
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_C_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_C_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 else()
   if(NOT DEFINED CMAKE_C_COMPILER_FRONTEND_VARIANT)
diff --git a/Modules/CMakeDetermineCXXCompiler.cmake b/Modules/CMakeDetermineCXXCompiler.cmake
index fd07a5c47e..22014ed869 100644
--- a/Modules/CMakeDetermineCXXCompiler.cmake
+++ b/Modules/CMakeDetermineCXXCompiler.cmake
@@ -124,6 +124,8 @@ if(NOT CMAKE_CXX_COMPILER_ID_RUN)
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_CXX_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_CXX_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 else()
   if(NOT DEFINED CMAKE_CXX_COMPILER_FRONTEND_VARIANT)
diff --git a/Modules/CMakeDetermineFortranCompiler.cmake b/Modules/CMakeDetermineFortranCompiler.cmake
index d7d032c01b..7751fe6875 100644
--- a/Modules/CMakeDetermineFortranCompiler.cmake
+++ b/Modules/CMakeDetermineFortranCompiler.cmake
@@ -212,6 +212,9 @@ if(NOT CMAKE_Fortran_COMPILER_ID_RUN)
         if(CMAKE_COMPILER_OUTPUT MATCHES "THIS_IS_CYGWIN")
           set(CMAKE_Fortran_PLATFORM_ID "Cygwin")
         endif()
+        if("${CMAKE_COMPILER_OUTPUT}" MATCHES ".*THIS_IS_MSYS.*" )
+          set(CMAKE_Fortran_PLATFORM_ID "MSYS")
+        endif()
       endif()
     endif()
   endif()
@@ -228,6 +231,9 @@ if(NOT CMAKE_Fortran_COMPILER_ID_RUN)
       if(CMAKE_COMPILER_OUTPUT MATCHES "THIS_IS_CYGWIN")
         set(CMAKE_Fortran_PLATFORM_ID "Cygwin")
       endif()
+      if(CMAKE_COMPILER_OUTPUT MATCHES "THIS_IS_MSYS")
+        set(CMAKE_Fortran_PLATFORM_ID "MSYS")
+      endif()
     endif()
   endif()
 
@@ -239,6 +245,8 @@ if(NOT CMAKE_Fortran_COMPILER_ID_RUN)
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_Fortran_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_Fortran_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 endif()
 
diff --git a/Modules/CMakeDetermineSystem.cmake b/Modules/CMakeDetermineSystem.cmake
index bae270dec1..4b37ebea32 100644
--- a/Modules/CMakeDetermineSystem.cmake
+++ b/Modules/CMakeDetermineSystem.cmake
@@ -27,6 +27,7 @@
 # Tru64                         Tru64
 # Ultrix                        ULTRIX
 # cygwin                        CYGWIN_NT-5.1
+# MSYS                          MSYS_NT-6.1
 # MacOSX                        Darwin
 
 
@@ -43,7 +44,7 @@ if(CMAKE_HOST_UNIX)
     else()
       exec_program(${CMAKE_UNAME} ARGS -r OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_VERSION)
     endif()
-    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|^GNU$|Android")
+    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|MSYS.*|^GNU$|Android")
       exec_program(${CMAKE_UNAME} ARGS -m OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR
         RETURN_VALUE val)
     elseif(CMAKE_HOST_SYSTEM_NAME MATCHES "Darwin")
@@ -178,6 +179,11 @@ macro(ADJUST_CMAKE_SYSTEM_VARIABLES _PREFIX)
     set(${_PREFIX}_NAME CYGWIN)
   endif()
 
+  # fix for MSYS which has windows version in it
+  if(${_PREFIX}_NAME MATCHES MSYS)
+    set(${_PREFIX}_NAME MSYS)
+  endif()
+
   # set CMAKE_SYSTEM to the CMAKE_SYSTEM_NAME
   set(${_PREFIX}  ${${_PREFIX}_NAME})
   # if there is a CMAKE_SYSTEM_VERSION then add a -${CMAKE_SYSTEM_VERSION}
diff --git a/Modules/CMakeFortranCompiler.cmake.in b/Modules/CMakeFortranCompiler.cmake.in
index 06ee5286d3..9bc5f018b3 100644
--- a/Modules/CMakeFortranCompiler.cmake.in
+++ b/Modules/CMakeFortranCompiler.cmake.in
@@ -20,11 +20,17 @@ set(CMAKE_Fortran_COMPILER_WORKS @CMAKE_Fortran_COMPILER_WORKS@)
 set(CMAKE_Fortran_ABI_COMPILED @CMAKE_Fortran_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
 
+if(CMAKE_COMPILER_IS_MSYS)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
+
 set(CMAKE_Fortran_COMPILER_ENV_VAR "FC")
 
 set(CMAKE_Fortran_COMPILER_SUPPORTS_F90 @CMAKE_Fortran_COMPILER_SUPPORTS_F90@)
diff --git a/Modules/CMakeFortranCompilerId.F.in b/Modules/CMakeFortranCompilerId.F.in
index 0a3db4cf6b..6c674d518f 100644
--- a/Modules/CMakeFortranCompilerId.F.in
+++ b/Modules/CMakeFortranCompilerId.F.in
@@ -148,6 +148,8 @@
 #endif
 #if defined(__linux) || defined(__linux__) || defined(linux)
         PRINT *, 'INFO:platform[Linux]'
+#elif defined(__MSYS__)
+        PRINT *, 'INFO:platform[MSYS]'
 #elif defined(__CYGWIN__)
         PRINT *, 'INFO:platform[Cygwin]'
 #elif defined(__MINGW32__)
diff --git a/Modules/CMakeJavaInformation.cmake b/Modules/CMakeJavaInformation.cmake
index 989afc11b5..3e2c51f7d5 100644
--- a/Modules/CMakeJavaInformation.cmake
+++ b/Modules/CMakeJavaInformation.cmake
@@ -42,7 +42,7 @@ endif()
 
 # set java include flag option and the separator for multiple include paths
 set(CMAKE_INCLUDE_FLAG_Java "-classpath ")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   set(CMAKE_INCLUDE_FLAG_SEP_Java ";")
 else()
   set(CMAKE_INCLUDE_FLAG_SEP_Java ":")
diff --git a/Modules/CMakePlatformId.h.in b/Modules/CMakePlatformId.h.in
index 1dc12c0606..47ec9b458e 100644
--- a/Modules/CMakePlatformId.h.in
+++ b/Modules/CMakePlatformId.h.in
@@ -5,6 +5,9 @@
 #if defined(__linux) || defined(__linux__) || defined(linux)
 # define PLATFORM_ID "Linux"
 
+#elif defined(__MSYS__)
+# define PLATFORM_ID "MSYS"
+
 #elif defined(__CYGWIN__)
 # define PLATFORM_ID "Cygwin"
 
diff --git a/Modules/CMakeSystemSpecificInformation.cmake b/Modules/CMakeSystemSpecificInformation.cmake
index ea3a445b6e..0ded568835 100644
--- a/Modules/CMakeSystemSpecificInformation.cmake
+++ b/Modules/CMakeSystemSpecificInformation.cmake
@@ -14,6 +14,7 @@
 set(APPLE  )
 set(UNIX   )
 set(CYGWIN )
+set(MSYS )
 set(WIN32  )
 
 
diff --git a/Modules/CMakeTestGNU.c b/Modules/CMakeTestGNU.c
index 7dcafde66e..6ea05d84c5 100644
--- a/Modules/CMakeTestGNU.c
+++ b/Modules/CMakeTestGNU.c
@@ -5,6 +5,8 @@ void THIS_IS_GNU();
 #ifdef __MINGW32__
 void THIS_IS_MINGW();
 #endif
-#ifdef __CYGWIN__
+#if defined(__MSYS__)
+void THIS_IS_MSYS();
+#elif defined(__CYGWIN__)
 void THIS_IS_CYGWIN();
 #endif
diff --git a/Modules/CPack.cmake b/Modules/CPack.cmake
index ef5a7d5b1a..f5741251ce 100644
--- a/Modules/CPack.cmake
+++ b/Modules/CPack.cmake
@@ -645,6 +645,8 @@ if(NOT CPACK_GENERATOR)
   if(UNIX)
     if(CYGWIN)
       option(CPACK_BINARY_CYGWIN "Enable to build Cygwin binary packages" ON)
+    elseif(MSYS)
+      option(CPACK_BINARY_MSYS "Enable to build MSYS binary packages" ON)
     else()
       if(APPLE)
         option(CPACK_BINARY_BUNDLE       "Enable to build OSX bundles"      OFF)
@@ -702,6 +704,7 @@ if(NOT CPACK_GENERATOR)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_7Z           7Z)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_BUNDLE       Bundle)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_CYGWIN       CygwinBinary)
+  cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_MSYS         MsysBinary)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_DEB          DEB)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_DRAGNDROP    DragNDrop)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_FREEBSD      FREEBSD)
@@ -728,6 +731,9 @@ if(NOT CPACK_SOURCE_GENERATOR)
     if(CYGWIN)
       option(CPACK_SOURCE_CYGWIN "Enable to build Cygwin source packages" ON)
       mark_as_advanced(CPACK_SOURCE_CYGWIN)
+    elseif(MSYS)
+      option(CPACK_SOURCE_MSYS "Enable to build MSYS source packages" ON)
+      mark_as_advanced(CPACK_SOURCE_MSYS)
     else()
       option(CPACK_SOURCE_RPM  "Enable to build RPM source packages"  OFF)
       option(CPACK_SOURCE_TBZ2 "Enable to build TBZ2 source packages" ON)
@@ -755,6 +761,7 @@ if(NOT CPACK_SOURCE_GENERATOR)
 
   cpack_optional_append(CPACK_SOURCE_GENERATOR  CPACK_SOURCE_7Z      7Z)
   cpack_optional_append(CPACK_SOURCE_GENERATOR  CPACK_SOURCE_CYGWIN  CygwinSource)
+  cpack_optional_append(CPACK_SOURCE_GENERATOR  CPACK_SOURCE_MSYS  MsysSource)
   cpack_optional_append(CPACK_SOURCE_GENERATOR  CPACK_SOURCE_RPM     RPM)
   cpack_optional_append(CPACK_SOURCE_GENERATOR  CPACK_SOURCE_TBZ2    TBZ2)
   cpack_optional_append(CPACK_SOURCE_GENERATOR  CPACK_SOURCE_TGZ     TGZ)
diff --git a/Modules/CPackMsys.cmake b/Modules/CPackMsys.cmake
new file mode 100644
index 0000000000..1025dff526
--- /dev/null
+++ b/Modules/CPackMsys.cmake
@@ -0,0 +1,33 @@
+##section Variables specific to CPack MSYS generator
+##end
+##module
+# - MSYS CPack generator (MSYS).
+# The following variable is specific to installers build on
+# and/or for MSYS:
+##end
+#
+##variable
+#   CPACK_MSYS_PATCH_NUMBER - The MSYS patch number.
+#   FIXME: This documentation is incomplete.
+##end
+##variable
+#   CPACK_MSYS_PATCH_FILE - The MSYS patch file.
+#   FIXME: This documentation is incomplete.
+##end
+##variable
+#   CPACK_MSYS_BUILD_SCRIPT - The MSYS build script.
+#   FIXME: This documentation is incomplete.
+##end
+
+#=============================================================================
+# Copyright 2006-2012 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
diff --git a/Modules/ExternalProject.cmake b/Modules/ExternalProject.cmake
index 56525080cc..130833b9a2 100644
--- a/Modules/ExternalProject.cmake
+++ b/Modules/ExternalProject.cmake
@@ -1936,7 +1936,7 @@ function(_ep_write_log_script name step cmd_var)
     string(REGEX REPLACE "^\\$\\(MAKE\\)" "\${make}" command "${command}")
     set(make "-Dmake=$(MAKE)")
 
-    if(WIN32 AND NOT CYGWIN)
+    if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       set(code_cygpath_make "
 if(\${make} MATCHES \"^/\")
   execute_process(
diff --git a/Modules/FindBoost.cmake b/Modules/FindBoost.cmake
index f8887ad2be..a3b95d3fd1 100644
--- a/Modules/FindBoost.cmake
+++ b/Modules/FindBoost.cmake
@@ -1841,7 +1841,7 @@ if ( NOT DEFINED Boost_LIB_PREFIX )
   # Boost's static libraries use a "lib" prefix on DLL platforms
   # to distinguish them from the DLL import libraries.
   if (Boost_USE_STATIC_LIBS AND (
-      (WIN32 AND NOT CYGWIN)
+      (WIN32 AND NOT CYGWIN AND NOT MSYS)
       OR GHSMULTI
       ))
     set(Boost_LIB_PREFIX "lib")
diff --git a/Modules/FindCoin3D.cmake b/Modules/FindCoin3D.cmake
index 301e70bd6e..95e59c2fa5 100644
--- a/Modules/FindCoin3D.cmake
+++ b/Modules/FindCoin3D.cmake
@@ -20,7 +20,7 @@ This module defines the following variables
 #]=======================================================================]
 
 if (WIN32)
-  if (CYGWIN)
+  if (CYGWIN OR MSYS)
 
     find_path(COIN3D_INCLUDE_DIRS Inventor/So.h)
     find_library(COIN3D_LIBRARIES Coin)
diff --git a/Modules/FindCurses.cmake b/Modules/FindCurses.cmake
index 5e25deb68e..bdb8e5c13e 100644
--- a/Modules/FindCurses.cmake
+++ b/Modules/FindCurses.cmake
@@ -76,7 +76,7 @@ endif()
 # cygwin ncurses stopped providing curses.h symlinks see above
 # message.  Cygwin is an ncurses package, so force ncurses on
 # cygwin if the curses.h is missing
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   if (CURSES_NEED_WIDE)
     if(NOT EXISTS /usr/include/ncursesw/curses.h)
       set(CURSES_USE_NCURSES TRUE)
diff --git a/Modules/FindFLTK.cmake b/Modules/FindFLTK.cmake
index e1e239a662..11fb71a784 100644
--- a/Modules/FindFLTK.cmake
+++ b/Modules/FindFLTK.cmake
@@ -89,7 +89,7 @@ endif()
 
 #  Platform dependent libraries required by FLTK
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(BORLAND)
       set( FLTK_PLATFORM_DEPENDENT_LIBS import32 )
     else()
diff --git a/Modules/FindFLTK2.cmake b/Modules/FindFLTK2.cmake
index a43f7a4755..fba9ca3782 100644
--- a/Modules/FindFLTK2.cmake
+++ b/Modules/FindFLTK2.cmake
@@ -30,7 +30,7 @@ set (FLTK2_DIR $ENV{FLTK2_DIR} )
 
 #  Platform dependent libraries required by FLTK2
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(BORLAND)
       set( FLTK2_PLATFORM_DEPENDENT_LIBS import32 )
     else()
diff --git a/Modules/FindGnuplot.cmake b/Modules/FindGnuplot.cmake
index ca2467d687..b4ea6ab3f3 100644
--- a/Modules/FindGnuplot.cmake
+++ b/Modules/FindGnuplot.cmake
@@ -23,6 +23,7 @@ GNUPLOT_VERSION_STRING will not work for old versions like 3.7.1.
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(GNUPLOT_EXECUTABLE
   NAMES
@@ -31,6 +32,7 @@ find_program(GNUPLOT_EXECUTABLE
   wgnupl32
   PATHS
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 if (GNUPLOT_EXECUTABLE)
diff --git a/Modules/FindMsys.cmake b/Modules/FindMsys.cmake
new file mode 100644
index 0000000000..2d7ebb1638
--- /dev/null
+++ b/Modules/FindMsys.cmake
@@ -0,0 +1,28 @@
+# - this module looks for MSYS
+#
+
+#=============================================================================
+# Copyright 2001-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+if (WIN32)
+  find_path(MSYS_INSTALL_PATH
+    msys2_shell.cmd
+    "C:/MSYS"
+    "[HKEY_LOCAL_MACHINE\\SOFTWARE\\MSYS\\setup;rootdir]"
+    "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Cygnus Solutions\\MSYS\\mounts v2\\/;native]"
+  )
+
+  mark_as_advanced(
+    MSYS_INSTALL_PATH
+  )
+endif ()
diff --git a/Modules/FindOpenSSL.cmake b/Modules/FindOpenSSL.cmake
index b1afa5f401..c6177cbf89 100644
--- a/Modules/FindOpenSSL.cmake
+++ b/Modules/FindOpenSSL.cmake
@@ -195,7 +195,7 @@ find_path(OPENSSL_INCLUDE_DIR
     include
 )
 
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   if(MSVC)
     # /MD and /MDd are the standard values - if someone wants to use
     # others, the libnames have to change here too
diff --git a/Modules/FindPNG.cmake b/Modules/FindPNG.cmake
index 94d15db5fc..9069b538d8 100644
--- a/Modules/FindPNG.cmake
+++ b/Modules/FindPNG.cmake
@@ -102,7 +102,7 @@ if(ZLIB_FOUND)
         list(APPEND PNG_LIBRARIES m)
       endif()
 
-      if (CYGWIN)
+      if (CYGWIN OR MSYS)
         if(BUILD_SHARED_LIBS)
            # No need to define PNG_USE_DLL here, because it's default for Cygwin.
         else()
diff --git a/Modules/FindPerl.cmake b/Modules/FindPerl.cmake
index c14e059e99..26962dff71 100644
--- a/Modules/FindPerl.cmake
+++ b/Modules/FindPerl.cmake
@@ -17,9 +17,11 @@ this module looks for Perl
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 set(PERL_POSSIBLE_BIN_PATHS
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   )
 
 if(WIN32)
diff --git a/Modules/FindPythonLibs.cmake b/Modules/FindPythonLibs.cmake
index 396f0d2ed4..db0660573f 100644
--- a/Modules/FindPythonLibs.cmake
+++ b/Modules/FindPythonLibs.cmake
@@ -339,7 +339,7 @@ function(PYTHON_ADD_MODULE _NAME )
 
     if(PYTHON_MODULE_${_NAME}_BUILD_SHARED)
       set_target_properties(${_NAME} PROPERTIES PREFIX "${PYTHON_MODULE_PREFIX}")
-      if(WIN32 AND NOT CYGWIN)
+      if(WIN32 AND NOT CYGWIN AND NOT MSYS)
         set_target_properties(${_NAME} PROPERTIES SUFFIX ".pyd")
       endif()
     endif()
diff --git a/Modules/FindQt3.cmake b/Modules/FindQt3.cmake
index da82e59292..c06207703e 100644
--- a/Modules/FindQt3.cmake
+++ b/Modules/FindQt3.cmake
@@ -220,7 +220,7 @@ if(QT_FOUND)
   set( QT_LIBRARIES ${QT_LIBRARIES} ${QT_QT_LIBRARY} )
   set( QT_DEFINITIONS "")
 
-  if (WIN32 AND NOT CYGWIN)
+  if (WIN32 AND NOT CYGWIN AND NOT MSYS)
     if (QT_QTMAIN_LIBRARY)
       # for version 3
       set (QT_DEFINITIONS -DQT_DLL -DQT_THREAD_SUPPORT -DNO_DEBUG)
diff --git a/Modules/FindSelfPackers.cmake b/Modules/FindSelfPackers.cmake
index 1abbcbd7ac..a6eb6e5f0c 100644
--- a/Modules/FindSelfPackers.cmake
+++ b/Modules/FindSelfPackers.cmake
@@ -17,15 +17,18 @@ executables or shared libs.  Examples:
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(SELF_PACKER_FOR_EXECUTABLE
   upx
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 find_program(SELF_PACKER_FOR_SHARED_LIB
   upx
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 mark_as_advanced(
diff --git a/Modules/FindThreads.cmake b/Modules/FindThreads.cmake
index 87e88bc318..17c734d6e8 100644
--- a/Modules/FindThreads.cmake
+++ b/Modules/FindThreads.cmake
@@ -225,7 +225,7 @@ if(CMAKE_USE_PTHREADS_INIT)
     set(CMAKE_THREAD_LIBS_INIT )
   endif()
 
-  if(CMAKE_SYSTEM MATCHES "CYGWIN_NT")
+  if(CMAKE_SYSTEM MATCHES "CYGWIN_NT" OR CMAKE_SYSTEM MATCHES "MSYS_NT")
     set(CMAKE_USE_PTHREADS_INIT 1)
     set(Threads_FOUND TRUE)
     set(CMAKE_THREAD_LIBS_INIT )
diff --git a/Modules/FindUnixCommands.cmake b/Modules/FindUnixCommands.cmake
index 2513f5c290..97739fa146 100644
--- a/Modules/FindUnixCommands.cmake
+++ b/Modules/FindUnixCommands.cmake
@@ -13,10 +13,12 @@ This module looks for the Unix commands ``bash``, ``cp``, ``gzip``,
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(BASH
   bash
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   BASH
@@ -25,6 +27,7 @@ mark_as_advanced(
 find_program(CP
   cp
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   CP
@@ -33,6 +36,7 @@ mark_as_advanced(
 find_program(GZIP
   gzip
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   GZIP
@@ -41,6 +45,7 @@ mark_as_advanced(
 find_program(MV
   mv
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   MV
@@ -49,6 +54,7 @@ mark_as_advanced(
 find_program(RM
   rm
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   RM
@@ -60,6 +66,7 @@ find_program(TAR
   gtar
   PATH
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 mark_as_advanced(
   TAR
diff --git a/Modules/FindWget.cmake b/Modules/FindWget.cmake
index bd01ec2018..d0b6fdf448 100644
--- a/Modules/FindWget.cmake
+++ b/Modules/FindWget.cmake
@@ -16,10 +16,12 @@ This module looks for wget.  This module defines the following values:
 #]=======================================================================]
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(WGET_EXECUTABLE
   wget
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)
diff --git a/Modules/GenerateExportHeader.cmake b/Modules/GenerateExportHeader.cmake
index a9a9c59354..7710f5c057 100644
--- a/Modules/GenerateExportHeader.cmake
+++ b/Modules/GenerateExportHeader.cmake
@@ -231,6 +231,7 @@ macro(_test_compiler_hidden_visibility)
       AND NOT _INTEL_TOO_OLD
       AND NOT WIN32
       AND NOT CYGWIN
+      AND NOT MSYS
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES XL
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES "^(PGI|NVHPC)$"
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES Watcom)
@@ -302,7 +303,7 @@ macro(_DO_SET_MACRO_VALUES TARGET_LIBRARY)
   get_property(type TARGET ${TARGET_LIBRARY} PROPERTY TYPE)
 
   if(NOT ${type} STREQUAL "STATIC_LIBRARY")
-    if(WIN32 OR CYGWIN)
+    if(WIN32 OR CYGWIN OR MSYS)
       set(DEFINE_EXPORT "__declspec(dllexport)")
       set(DEFINE_IMPORT "__declspec(dllimport)")
     elseif(COMPILER_HAS_HIDDEN_VISIBILITY)
diff --git a/Modules/KDE3Macros.cmake b/Modules/KDE3Macros.cmake
index 1c353ba841..7dd3487a93 100644
--- a/Modules/KDE3Macros.cmake
+++ b/Modules/KDE3Macros.cmake
@@ -311,7 +311,7 @@ macro(KDE3_INSTALL_LIBTOOL_FILE _target)
   file(APPEND ${_laname} "# The name that we can dlopen(3).\n")
   file(APPEND ${_laname} "dlname='${_soname}'\n")
   file(APPEND ${_laname} "# Names of this library\n")
-  if(CYGWIN)
+  if(CYGWIN OR MSYS)
     file(APPEND ${_laname} "library_names='${_soname}'\n")
   else()
     file(APPEND ${_laname} "library_names='${_soname} ${_soname} ${_soname}'\n")
diff --git a/Modules/Platform/MSYS-Clang-C.cmake b/Modules/Platform/MSYS-Clang-C.cmake
new file mode 100644
index 0000000000..129f32ea42
--- /dev/null
+++ b/Modules/Platform/MSYS-Clang-C.cmake
@@ -0,0 +1 @@
+include(Platform/MSYS-GNU-C)
diff --git a/Modules/Platform/MSYS-Clang-CXX.cmake b/Modules/Platform/MSYS-Clang-CXX.cmake
new file mode 100644
index 0000000000..e6b54810dc
--- /dev/null
+++ b/Modules/Platform/MSYS-Clang-CXX.cmake
@@ -0,0 +1 @@
+include(Platform/MSYS-GNU-CXX)
diff --git a/Modules/Platform/MSYS-Determine-CXX.cmake b/Modules/Platform/MSYS-Determine-CXX.cmake
new file mode 100644
index 0000000000..bf37f79030
--- /dev/null
+++ b/Modules/Platform/MSYS-Determine-CXX.cmake
@@ -0,0 +1,7 @@
+if(NOT CMAKE_CXX_COMPILER_NAMES)
+  set(CMAKE_CXX_COMPILER_NAMES c++)
+endif()
+
+# Exclude C++ compilers differing from C compiler only by case
+# because this platform may have a case-insensitive filesystem.
+set(CMAKE_CXX_COMPILER_EXCLUDE CC aCC xlC)
diff --git a/Modules/Platform/MSYS-GNU-C.cmake b/Modules/Platform/MSYS-GNU-C.cmake
new file mode 100644
index 0000000000..c4e78f0402
--- /dev/null
+++ b/Modules/Platform/MSYS-GNU-C.cmake
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(C)
diff --git a/Modules/Platform/MSYS-GNU-CXX.cmake b/Modules/Platform/MSYS-GNU-CXX.cmake
new file mode 100644
index 0000000000..8d22345b50
--- /dev/null
+++ b/Modules/Platform/MSYS-GNU-CXX.cmake
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(CXX)
diff --git a/Modules/Platform/MSYS-GNU-Fortran.cmake b/Modules/Platform/MSYS-GNU-Fortran.cmake
new file mode 100644
index 0000000000..048392178f
--- /dev/null
+++ b/Modules/Platform/MSYS-GNU-Fortran.cmake
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(Fortran)
diff --git a/Modules/Platform/MSYS-GNU.cmake b/Modules/Platform/MSYS-GNU.cmake
new file mode 100644
index 0000000000..c2da065553
--- /dev/null
+++ b/Modules/Platform/MSYS-GNU.cmake
@@ -0,0 +1,54 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+
+# This module is shared by multiple languages; use include blocker.
+if(__MSYS_COMPILER_GNU)
+  return()
+endif()
+set(__MSYS_COMPILER_GNU 1)
+
+# TODO: Is -Wl,--enable-auto-import now always default?
+string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " -Wl,--enable-auto-import")
+set(CMAKE_CREATE_WIN32_EXE  "-mwindows")
+
+set(CMAKE_GNULD_IMAGE_VERSION
+  "-Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR>")
+set(CMAKE_GENERATOR_RC windres)
+macro(__msys_compiler_gnu lang)
+  # Binary link rules.
+  set(CMAKE_${lang}_CREATE_SHARED_MODULE
+    "<CMAKE_${lang}_COMPILER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_MODULE_${lang}_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_${lang}_FLAGS> -o <TARGET> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
+  set(CMAKE_${lang}_CREATE_SHARED_LIBRARY
+    "<CMAKE_${lang}_COMPILER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_LIBRARY_${lang}_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
+  set(CMAKE_${lang}_LINK_EXECUTABLE
+    "<CMAKE_${lang}_COMPILER> <FLAGS> <CMAKE_${lang}_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> ${CMAKE_GNULD_IMAGE_VERSION} <LINK_LIBRARIES>")
+
+   # No -fPIC on MSYS
+  set(CMAKE_${lang}_COMPILE_OPTIONS_PIC "")
+  set(CMAKE_${lang}_COMPILE_OPTIONS_PIE "")
+  set(_CMAKE_${lang}_PIE_MAY_BE_SUPPORTED_BY_LINKER NO)
+  set(CMAKE_${lang}_LINK_OPTIONS_PIE "")
+  set(CMAKE_${lang}_LINK_OPTIONS_NO_PIE "")
+  set(CMAKE_SHARED_LIBRARY_${lang}_FLAGS "")
+
+  # Initialize C link type selection flags.  These flags are used when
+  # building a shared library, shared module, or executable that links
+  # to other libraries to select whether to use the static or shared
+  # versions of the libraries.
+  foreach(type SHARED_LIBRARY SHARED_MODULE EXE)
+    set(CMAKE_${type}_LINK_STATIC_${lang}_FLAGS "-Wl,-Bstatic")
+    set(CMAKE_${type}_LINK_DYNAMIC_${lang}_FLAGS "-Wl,-Bdynamic")
+  endforeach()
+
+  set(CMAKE_EXE_EXPORTS_${lang}_FLAG "-Wl,--export-all-symbols")
+  # TODO: Is -Wl,--enable-auto-import now always default?
+  string(APPEND CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS " -Wl,--enable-auto-import")
+  set(CMAKE_SHARED_MODULE_CREATE_${lang}_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS}")
+
+  if(NOT CMAKE_RC_COMPILER_INIT)
+    set(CMAKE_RC_COMPILER_INIT windres)
+  endif()
+
+  enable_language(RC)
+endmacro()
diff --git a/Modules/Platform/MSYS-windres.cmake b/Modules/Platform/MSYS-windres.cmake
new file mode 100644
index 0000000000..7d787dddf3
--- /dev/null
+++ b/Modules/Platform/MSYS-windres.cmake
@@ -0,0 +1 @@
+set(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff <DEFINES> <INCLUDES> <FLAGS> <SOURCE> <OBJECT>")
diff --git a/Modules/Platform/MSYS.cmake b/Modules/Platform/MSYS.cmake
new file mode 100644
index 0000000000..a83d81a665
--- /dev/null
+++ b/Modules/Platform/MSYS.cmake
@@ -0,0 +1,75 @@
+if("${CMAKE_MINIMUM_REQUIRED_VERSION}" VERSION_LESS "2.8.3.20101214")
+  set(__USE_CMAKE_LEGACY_CYGWIN_WIN32 1)
+endif()
+if(NOT DEFINED WIN32)
+  set(WIN32 0)
+  if(DEFINED __USE_CMAKE_LEGACY_CYGWIN_WIN32)
+    if(NOT DEFINED CMAKE_LEGACY_CYGWIN_WIN32
+        AND DEFINED ENV{CMAKE_LEGACY_CYGWIN_WIN32})
+      set(CMAKE_LEGACY_CYGWIN_WIN32 $ENV{CMAKE_LEGACY_CYGWIN_WIN32})
+    endif()
+    if(CMAKE_LEGACY_CYGWIN_WIN32)
+      message(STATUS "Defining WIN32 under MSYS due to CMAKE_LEGACY_CYGWIN_WIN32")
+      set(WIN32 1)
+    elseif("x${CMAKE_LEGACY_CYGWIN_WIN32}" STREQUAL "x")
+      message(WARNING "CMake no longer defines WIN32 on MSYS!"
+        "\n"
+        "(1) If you are just trying to build this project, ignore this warning "
+        "or quiet it by setting CMAKE_LEGACY_CYGWIN_WIN32=0 in your environment or "
+        "in the CMake cache.  "
+        "If later configuration or build errors occur then this project may "
+        "have been written under the assumption that MSYS is WIN32.  "
+        "In that case, set CMAKE_LEGACY_CYGWIN_WIN32=1 instead."
+        "\n"
+        "(2) If you are developing this project, add the line\n"
+        "  set(CMAKE_LEGACY_CYGWIN_WIN32 0) # Remove when CMake >= 2.8.4 is required\n"
+        "at the top of your top-level CMakeLists.txt file or set the minimum "
+        "required version of CMake to 2.8.4 or higher.  "
+        "Then teach your project to build on Cygwin without WIN32.")
+    endif()
+  elseif(DEFINED CMAKE_LEGACY_CYGWIN_WIN32)
+    message(AUTHOR_WARNING "CMAKE_LEGACY_CYGWIN_WIN32 ignored because\n"
+      "  cmake_minimum_required(VERSION ${CMAKE_MINIMUM_REQUIRED_VERSION})\n"
+      "is at least 2.8.4.")
+  endif()
+endif()
+if(DEFINED __USE_CMAKE_LEGACY_CYGWIN_WIN32)
+  # Pass WIN32 legacy setting to scripts.
+  if(WIN32)
+    set(ENV{CMAKE_LEGACY_CYGWIN_WIN32} 1)
+  else()
+    set(ENV{CMAKE_LEGACY_CYGWIN_WIN32} 0)
+  endif()
+  unset(__USE_CMAKE_LEGACY_CYGWIN_WIN32)
+endif()
+
+set(MSYS 1)
+#set(CYGWIN 1)
+
+set(CMAKE_SHARED_LIBRARY_PREFIX "msys-")
+set(CMAKE_SHARED_LIBRARY_SUFFIX ".dll")
+set(CMAKE_SHARED_MODULE_PREFIX "msys-")
+set(CMAKE_SHARED_MODULE_SUFFIX ".dll")
+set(CMAKE_IMPORT_LIBRARY_PREFIX "lib")
+set(CMAKE_IMPORT_LIBRARY_SUFFIX ".dll.a")
+set(CMAKE_EXECUTABLE_SUFFIX ".exe")          # .exe
+# Modules have a different default prefix that shared libs.
+set(CMAKE_MODULE_EXISTS 1)
+
+set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
+set(CMAKE_FIND_LIBRARY_SUFFIXES ".dll.a" ".a")
+
+# Shared libraries on MSYS can be named with their version number.
+set(CMAKE_SHARED_LIBRARY_NAME_WITH_VERSION 1)
+
+include(Platform/UnixPaths)
+
+# Windows API on Cygwin
+list(APPEND CMAKE_SYSTEM_INCLUDE_PATH
+  /usr/include/w32api
+  )
+
+# Windows API on Cygwin
+list(APPEND CMAKE_SYSTEM_LIBRARY_PATH
+  /usr/lib/w32api
+  )
diff --git a/Modules/Platform/Windows-GNU.cmake b/Modules/Platform/Windows-GNU.cmake
index a2e3811dd8..2aac2a63bc 100644
--- a/Modules/Platform/Windows-GNU.cmake
+++ b/Modules/Platform/Windows-GNU.cmake
@@ -73,9 +73,11 @@ macro(__windows_compiler_gnu lang)
   set(CMAKE_${lang}_LINK_OPTIONS_NO_PIE "")
   set(CMAKE_SHARED_LIBRARY_${lang}_FLAGS "")
 
-  set(CMAKE_${lang}_USE_RESPONSE_FILE_FOR_OBJECTS ${__WINDOWS_GNU_LD_RESPONSE})
-  set(CMAKE_${lang}_USE_RESPONSE_FILE_FOR_LIBRARIES ${__WINDOWS_GNU_LD_RESPONSE})
-  set(CMAKE_${lang}_USE_RESPONSE_FILE_FOR_INCLUDES 1)
+  if(NOT CMAKE_GENERATOR STREQUAL "MSYS Makefiles")
+    set(CMAKE_${lang}_USE_RESPONSE_FILE_FOR_OBJECTS ${__WINDOWS_GNU_LD_RESPONSE})
+    set(CMAKE_${lang}_USE_RESPONSE_FILE_FOR_LIBRARIES ${__WINDOWS_GNU_LD_RESPONSE})
+    set(CMAKE_${lang}_USE_RESPONSE_FILE_FOR_INCLUDES 1)
+  endif()
 
   # We prefer "@" for response files but it is not supported by gcc 3.
   execute_process(COMMAND ${CMAKE_${lang}_COMPILER} --version OUTPUT_VARIABLE _ver ERROR_VARIABLE _ver)
diff --git a/Modules/UseJava.cmake b/Modules/UseJava.cmake
index 120a54c845..2e9052df57 100644
--- a/Modules/UseJava.cmake
+++ b/Modules/UseJava.cmake
@@ -453,7 +453,7 @@ endfunction()
 set(_JAVA_EXPORT_TARGETS_SCRIPT ${CMAKE_CURRENT_LIST_DIR}/UseJava/javaTargets.cmake.in)
 set(_JAVA_SYMLINK_SCRIPT ${CMAKE_CURRENT_LIST_DIR}/UseJava/Symlinks.cmake)
 
-if (CMAKE_HOST_WIN32 AND NOT CYGWIN AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
+if (CMAKE_HOST_WIN32 AND NOT CYGWIN AND NOT MSYS AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
     set(_UseJava_PATH_SEP "$<SEMICOLON>")
 else ()
     set(_UseJava_PATH_SEP ":")
diff --git a/Modules/UseSWIG.cmake b/Modules/UseSWIG.cmake
index 7d7f7377c5..a6d46263ab 100644
--- a/Modules/UseSWIG.cmake
+++ b/Modules/UseSWIG.cmake
@@ -911,7 +911,7 @@ function(SWIG_ADD_LIBRARY name)
     if (APPLE)
       set_target_properties (${target_name} PROPERTIES SUFFIX ".jnilib")
     endif()
-    if ((WIN32 AND MINGW) OR CYGWIN OR CMAKE_SYSTEM_NAME STREQUAL MSYS)
+    if ((WIN32 AND MINGW) OR CYGWIN OR MSYS OR CMAKE_SYSTEM_NAME STREQUAL MSYS)
       set_target_properties(${target_name} PROPERTIES PREFIX "")
     endif()
   elseif (swig_lowercase_language STREQUAL "lua")
@@ -935,7 +935,7 @@ function(SWIG_ADD_LIBRARY name)
     # Windows: .dll is no longer supported as a filename extension for extension modules.
     # .pyd is now the only filename extension that will be searched for.
     # </quote>
-    if(WIN32 AND NOT CYGWIN)
+    if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       set_target_properties(${target_name} PROPERTIES SUFFIX ".pyd")
     endif()
   elseif (swig_lowercase_language STREQUAL "r")
diff --git a/Source/CMakeInstallDestinations.cmake b/Source/CMakeInstallDestinations.cmake
index e82bec3cd0..38fb6902ce 100644
--- a/Source/CMakeInstallDestinations.cmake
+++ b/Source/CMakeInstallDestinations.cmake
@@ -6,7 +6,7 @@ if(BEOS)
   set(CMAKE_INFO_DIR_DEFAULT "documentation/info") # HAIKU
   set(CMAKE_MAN_DIR_DEFAULT "documentation/man") # HAIKU
   set(CMAKE_XDGDATA_DIR_DEFAULT "share") # HAIKU
-elseif(CYGWIN)
+elseif(CYGWIN OR MSYS)
   set(CMAKE_BIN_DIR_DEFAULT "bin") # CYGWIN
   set(CMAKE_DATA_DIR_DEFAULT "share/cmake-${CMake_VERSION}") # CYGWIN
   set(CMAKE_DOC_DIR_DEFAULT "share/doc/cmake-${CMake_VERSION}") # CYGWIN
diff --git a/Source/CMakeLists.txt b/Source/CMakeLists.txt
index 6adc9cf6a8..7395b53405 100644
--- a/Source/CMakeLists.txt
+++ b/Source/CMakeLists.txt
@@ -872,7 +872,7 @@ set(SRCS ${SRCS}
 # Temporary variable for tools targets
 set(_tools)
 
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   set_source_files_properties(cmcldeps.cxx PROPERTIES COMPILE_DEFINITIONS _WIN32_WINNT=0x0501)
   add_executable(cmcldeps cmcldeps.cxx ${MANIFEST_FILE})
   list(APPEND _tools cmcldeps)
@@ -1051,7 +1051,7 @@ set(CPACK_SRCS ${CPACK_SRCS}
   CPack/IFW/cmCPackIFWRepository.h
   )
 
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   set(CPACK_SRCS ${CPACK_SRCS}
     CPack/cmCPackCygwinBinaryGenerator.cxx
     CPack/cmCPackCygwinSourceGenerator.cxx
@@ -1093,10 +1093,10 @@ if(UNIX)
   endif()
 endif()
 
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   find_package(LibUUID)
 endif()
-if(WIN32 OR (CYGWIN AND LibUUID_FOUND))
+if(WIN32 OR ((CYGWIN OR MSYS) AND LibUUID_FOUND))
   set(CPACK_SRCS ${CPACK_SRCS}
     CPack/WiX/cmCMakeToWixPath.cxx
     CPack/WiX/cmCMakeToWixPath.h
@@ -1153,7 +1153,7 @@ if(APPLE)
       "See CMakeFiles/CMakeError.log for details of the failure.")
   endif()
 endif()
-if(CYGWIN AND LibUUID_FOUND)
+if((CYGWIN OR MSYS) AND LibUUID_FOUND)
   target_link_libraries(CPackLib ${LibUUID_LIBRARIES})
   include_directories(CPackLib ${LibUUID_INCLUDE_DIRS})
   set_property(SOURCE CPack/cmCPackGeneratorFactory.cxx PROPERTY COMPILE_DEFINITIONS HAVE_LIBUUID)
diff --git a/Source/Modules/FindLibUUID.cmake b/Source/Modules/FindLibUUID.cmake
index 17f11c1f5e..b2b096c69a 100644
--- a/Source/Modules/FindLibUUID.cmake
+++ b/Source/Modules/FindLibUUID.cmake
@@ -50,6 +50,16 @@ if(CYGWIN)
     NAMES cyguuid-1.dll
     )
   set(CMAKE_FIND_LIBRARY_SUFFIXES ${old_suffixes})
+elseif(MSYS)
+  # Note: on current version of MSYS2, linking to libuuid.dll.a doesn't
+  #       import the right symbols sometimes. Fix this by linking directly
+  #       to the DLL that provides the symbols, instead.
+  set(old_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})
+  set(CMAKE_FIND_LIBRARY_SUFFIXES .dll)
+  find_library(LibUUID_LIBRARY
+    NAMES msys-uuid-1.dll
+    )
+  set(CMAKE_FIND_LIBRARY_SUFFIXES ${old_suffixes})
 else()
   find_library(LibUUID_LIBRARY
     NAMES uuid
diff --git a/Source/cmExtraEclipseCDT4Generator.cxx b/Source/cmExtraEclipseCDT4Generator.cxx
index ccfd72798a..5fbbef7ac4 100644
--- a/Source/cmExtraEclipseCDT4Generator.cxx
+++ b/Source/cmExtraEclipseCDT4Generator.cxx
@@ -655,7 +655,7 @@ void cmExtraEclipseCDT4Generator::CreateCProjectFile() const
     xml.EndElement(); // extension
   } else {
     std::string systemName = mf->GetSafeDefinition("CMAKE_SYSTEM_NAME");
-    if (systemName == "CYGWIN") {
+    if (systemName == "CYGWIN" || systemName == "MSYS") {
       xml.StartElement("extension");
       xml.Attribute("id", "org.eclipse.cdt.core.Cygwin_PE");
       xml.Attribute("point", "org.eclipse.cdt.core.BinaryParser");
diff --git a/Source/cmLocalGenerator.cxx b/Source/cmLocalGenerator.cxx
index 73b6fbcf6e..13a50d273e 100644
--- a/Source/cmLocalGenerator.cxx
+++ b/Source/cmLocalGenerator.cxx
@@ -1465,7 +1465,7 @@ void cmLocalGenerator::GetTargetFlags(
           sharedLibFlags += " ";
         }
         if (this->Makefile->IsOn("WIN32") &&
-            !(this->Makefile->IsOn("CYGWIN") ||
+            !(this->Makefile->IsOn("CYGWIN") || this->Makefile->IsOn("MSYS") ||
               this->Makefile->IsOn("MINGW"))) {
           std::vector<cmSourceFile*> sources;
           target->GetSourceFiles(sources, config);
diff --git a/Source/kwsys/CMakeLists.txt b/Source/kwsys/CMakeLists.txt
index b0a8542929..bd6d82ca0a 100644
--- a/Source/kwsys/CMakeLists.txt
+++ b/Source/kwsys/CMakeLists.txt
@@ -470,7 +470,7 @@ endif()
 if(KWSYS_USE_SystemInformation)
   set_property(SOURCE SystemInformation.cxx APPEND PROPERTY
     COMPILE_DEFINITIONS SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P})
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     include(CheckIncludeFiles)
     CHECK_INCLUDE_FILES("sys/types.h;ifaddrs.h" KWSYS_SYS_HAS_IFADDRS_H)
     if(KWSYS_SYS_HAS_IFADDRS_H)
@@ -581,7 +581,7 @@ if(KWSYS_USE_SystemInformation)
       COMPILE_DEFINITIONS KWSYS_BUILD_SHARED=1)
   endif()
 
-  if(UNIX AND NOT CYGWIN)
+  if(UNIX AND NOT CYGWIN AND NOT MSYS)
     KWSYS_PLATFORM_CXX_TEST(KWSYS_CXX_HAS_GETLOADAVG
       "Checking whether CXX compiler has getloadavg" DIRECT)
     if(KWSYS_CXX_HAS_GETLOADAVG)
diff --git a/Tests/CMakeLists.txt b/Tests/CMakeLists.txt
index 8e7c04fbd0..c94ad435ac 100644
--- a/Tests/CMakeLists.txt
+++ b/Tests/CMakeLists.txt
@@ -105,7 +105,7 @@ if(BUILD_TESTING)
   # assume no resources building to test
   set(CMake_TEST_RESOURCES FALSE)
   # for windows and cygwin assume we have resources
-  if(WIN32 OR CYGWIN)
+  if(WIN32 OR CYGWIN OR MSYS)
     set(CMake_TEST_RESOURCES TRUE)
   endif()
   # for borland and watcom there is no resource support
@@ -292,7 +292,7 @@ if(BUILD_TESTING)
   endif()
 
   if(do_cvs_tests AND NOT UNIX)
-    if("${CVS_EXECUTABLE}" MATCHES "cygwin")
+    if("${CVS_EXECUTABLE}" MATCHES "cygwin" OR "${CVS_EXECUTABLE}" MATCHES "MSYS")
       set(do_cvs_tests 0)
     endif()
   endif()
@@ -1890,7 +1890,7 @@ if(BUILD_TESTING)
 
   # Test static linking on toolchains known to support it.
   if(CMAKE_C_COMPILER_ID STREQUAL "GNU"
-      AND NOT APPLE AND NOT WIN32 AND NOT CYGWIN
+      AND NOT APPLE AND NOT WIN32 AND NOT CYGWIN AND NOT MSYS
       AND EXISTS "/usr/lib/libm.a")
     add_test(LinkStatic  ${CMAKE_CTEST_COMMAND}
       --build-and-test
@@ -2609,7 +2609,7 @@ if(BUILD_TESTING)
     mark_as_advanced(BZR_EXECUTABLE)
     set(CTEST_TEST_UPDATE_BZR 0)
     if(BZR_EXECUTABLE)
-      if(NOT "${BZR_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${BZR_EXECUTABLE}" MATCHES "cygwin" OR "${BZR_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_BZR 1)
       endif()
     endif()
@@ -2641,7 +2641,7 @@ if(BUILD_TESTING)
     mark_as_advanced(GIT_EXECUTABLE)
     set(CTEST_TEST_UPDATE_GIT 0)
     if(GIT_EXECUTABLE)
-      if(NOT "${GIT_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${GIT_EXECUTABLE}" MATCHES "cygwin" OR "${GIT_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_GIT 1)
       endif()
     endif()
@@ -2660,7 +2660,7 @@ if(BUILD_TESTING)
     mark_as_advanced(HG_EXECUTABLE)
     set(CTEST_TEST_UPDATE_HG 0)
     if(HG_EXECUTABLE)
-      if(NOT "${HG_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${HG_EXECUTABLE}" MATCHES "cygwin" OR "${HG_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_HG 1)
       endif()
     endif()
@@ -2680,7 +2680,7 @@ if(BUILD_TESTING)
     mark_as_advanced(P4_EXECUTABLE P4D_EXECUTABLE)
     set(CTEST_TEST_UPDATE_P4 0)
     if(P4_EXECUTABLE AND P4D_EXECUTABLE)
-      if(NOT "${P4_EXECUTABLE};${P4D_EXECUTABLE}" MATCHES "cygwin" OR UNIX)
+      if(NOT "${P4_EXECUTABLE};${P4D_EXECUTABLE}" MATCHES "cygwin" OR "${P4_EXECUTABLE}" MATCHES "MSYS" OR UNIX)
         set(CTEST_TEST_UPDATE_P4 1)
       endif()
     endif()
@@ -2969,7 +2969,7 @@ if(BUILD_TESTING)
   set(CTestTestBadExe_REGEX "BAD_COMMAND")
   # some cygwin can not be made to produce a BAD_COMMAND error
   # the best we can get from it is a failed test
-  if(CYGWIN)
+  if(CYGWIN OR MSYS)
     set(CTestTestBadExe_REGEX "(\\*\\*\\*Failed)|BAD_COMMAND")
   endif()
   set_tests_properties(CTestTestBadExe PROPERTIES
diff --git a/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt b/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt
index 7ca68ecf44..aca99ceff7 100644
--- a/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt
+++ b/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt
@@ -36,7 +36,7 @@ if(CMAKE_CXX_COMPILER_ID MATCHES Intel)
   string (REGEX REPLACE ".*Version ([0-9]+(\\.[0-9]+)+).*" "\\1" _intel_version "${_intel_version_info}")
 endif()
 
-message("Platform:\n  WIN32: ${WIN32}\n  UNIX: ${UNIX}\n  APPLE: ${APPLE}\n  MINGW: ${MINGW}\n  CYGWIN: ${CYGWIN}\n"
+message("Platform:\n  WIN32: ${WIN32}\n  UNIX: ${UNIX}\n  APPLE: ${APPLE}\n  MINGW: ${MINGW}\n  CYGWIN: ${CYGWIN}\n  MSYS: ${MSYS}\n"
   "  MSVC: ${MSVC}\n  MSVC60: ${MSVC60}\n  MSVC70: ${MSVC70}\n  MSVC71: ${MSVC71}\n  MSVC80: ${MSVC80}\n  MSVC90: ${MSVC90}\n  MSVC10: ${MSVC10}\n"
   "  GCC: ${_gcc_version}\n"
   "  Clang: ${_clang_version}\n"
diff --git a/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in b/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in
index f01e616f01..226333a4e4 100644
--- a/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in
+++ b/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in
@@ -441,21 +441,23 @@ list(APPEND platforms cygwin_gfortran)
 # MSYS
 
 # gcc dummy.c -v
-set(msys_gcc_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/cckQmvRt.o -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_gcc_libs "mingw32;gcc;moldname;mingwex;user32;kernel32;advapi32;shell32;mingw32;gcc;moldname;mingwex")
-set(msys_gcc_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(msys_gcc_text " /usr/lib/gcc/i686-pc-msys/6.4.0/collect2.exe -Bdynamic --dll-search-prefix=msys- /usr/lib/gcc/i686-pc-msys/6.4.0/../../../crt0.o -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0/../../.. /home/user/AppData/Local/Temp/cczg1Arh.o -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc")
+set(msys_gcc_libs "msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_gcc_dirs "/usr/lib/gcc/i686-pc-msys/6.4.0;/usr/lib")
 list(APPEND platforms msys_gcc)
 
 # g++ dummy.cxx -v
-set(msys_g++_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/cci5hYPk.o -lstdc++ -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_g++_libs "stdc++;mingw32;gcc;moldname;mingwex;user32;kernel32;advapi32;shell32;mingw32;gcc;moldname;mingwex")
-set(msys_g++_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(msys_g++_text " /usr/lib/gcc/i686-pc-msys/6.4.0/collect2.exe -Bdynamic --dll-search-prefix=msys- /usr/lib/gcc/i686-pc-msys/6.4.0/../../../crt0.o -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0/../../.. /home/user/AppData/Local/Temp/ccsvcDO6.o -lstdc++ -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc")
+set(msys_g++_libs "stdc++;msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_g++_dirs "/usr/lib/gcc/i686-pc-msys/6.4.0;/usr/lib")
 list(APPEND platforms msys_g++)
 
 # g77 dummy.f -v
-set(msys_g77_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/ccabRxQ1.o -lfrtbegin -lg2c -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_g77_libs "frtbegin;g2c;mingw32;gcc;moldname;mingwex;user32;kernel32;advapi32;shell32;mingw32;gcc;moldname;mingwex")
-set(msys_g77_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(msys_g77_text "Configured with: ... LD=/opt/gcc-tools/bin/ld.exe
+ /usr/lib/gcc/i686-pc-msys/6.4.0/collect2.exe -Bdynamic --dll-search-prefix=msys- -u ___register_frame_info -u ___deregister_frame_info /usr/lib/gcc/i686-pc-msys/6.4.0/../../../crt0.o /usr/lib/gcc/i686-pc-msys/6.4.0/crtbegin.o -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0 -L/usr/lib/gcc/i686-pc-msys/6.4.0/../../.. /home/user/AppData/Local/Temp/ccqRWKWg.o -lgfortranbegin -lgfortran -lgcc_s -lgcc_s -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc_s -lgcc_s -lgcc /usr/lib/gcc/i686-pc-msys/6.4.0/crtend.o
+")
+set(msys_g77_libs set(msys_g++_libs "stdc++;msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_g77_dirs "/usr/lib/gcc/i686-pc-msys/6.4.0;/usr/lib")
 list(APPEND platforms msys_g77)
 
 #-----------------------------------------------------------------------------
diff --git a/Tests/Complex/Library/CMakeLists.txt b/Tests/Complex/Library/CMakeLists.txt
index df874ef913..2cbb953109 100644
--- a/Tests/Complex/Library/CMakeLists.txt
+++ b/Tests/Complex/Library/CMakeLists.txt
@@ -24,7 +24,7 @@ remove(LibrarySources create_file.cxx GENERATED nonexisting_file)
 add_library(CMakeTestLibrary ${LibrarySources})
 
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(NOT BORLAND)
       if(NOT MINGW)
         target_link_libraries(CMakeTestLibrary
diff --git a/Tests/ComplexOneConfig/Library/CMakeLists.txt b/Tests/ComplexOneConfig/Library/CMakeLists.txt
index df874ef913..2cbb953109 100644
--- a/Tests/ComplexOneConfig/Library/CMakeLists.txt
+++ b/Tests/ComplexOneConfig/Library/CMakeLists.txt
@@ -24,7 +24,7 @@ remove(LibrarySources create_file.cxx GENERATED nonexisting_file)
 add_library(CMakeTestLibrary ${LibrarySources})
 
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(NOT BORLAND)
       if(NOT MINGW)
         target_link_libraries(CMakeTestLibrary
diff --git a/Tests/ExternalProject/CMakeLists.txt b/Tests/ExternalProject/CMakeLists.txt
index 59e3bcc1ff..548ee1fda8 100644
--- a/Tests/ExternalProject/CMakeLists.txt
+++ b/Tests/ExternalProject/CMakeLists.txt
@@ -122,7 +122,7 @@ if(CVS_EXECUTABLE)
 endif()
 
 if(do_cvs_tests AND NOT UNIX)
-  if("${CVS_EXECUTABLE}" MATCHES "cygwin")
+  if("${CVS_EXECUTABLE}" MATCHES "cygwin" OR "${CVS_EXECUTABLE}" MATCHES "MSYS")
     message(STATUS "No ExternalProject cvs tests with cygwin cvs.exe outside cygwin!")
     set(do_cvs_tests 0)
   endif()
@@ -559,7 +559,7 @@ if(HG_EXECUTABLE)
 endif()
 
 if(do_hg_tests AND NOT UNIX)
-  if("${HG_EXECUTABLE}" MATCHES "cygwin")
+  if("${HG_EXECUTABLE}" MATCHES "cygwin" OR "${CVS_EXECUTABLE}" MATCHES "MSYS")
     message(STATUS "No ExternalProject hg tests with cygwin hg outside cygwin!")
     set(do_hg_tests 0)
   endif()
diff --git a/Tests/FindPackageTest/CMakeLists.txt b/Tests/FindPackageTest/CMakeLists.txt
index 7217f43b61..446d3ac7d8 100644
--- a/Tests/FindPackageTest/CMakeLists.txt
+++ b/Tests/FindPackageTest/CMakeLists.txt
@@ -65,7 +65,7 @@ endif()
 #-----------------------------------------------------------------------------
 # Test system package registry if possible.
 set(CMakeTestSystemPackage "")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   # Try writing a value to the system package registry.
   set(_data "${FindPackageTest_SOURCE_DIR}/SystemPackage")
   set(_key "HKLM\\Software\\Kitware\\CMake\\Packages\\CMakeTestSystemPackage")
diff --git a/Tests/Fortran/CMakeLists.txt b/Tests/Fortran/CMakeLists.txt
index 18688923fb..c51732bcdf 100644
--- a/Tests/Fortran/CMakeLists.txt
+++ b/Tests/Fortran/CMakeLists.txt
@@ -25,7 +25,7 @@ endif()
 
 # Pick a module .def file with the properly mangled symbol name.
 set(world_def "")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   if(CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
     set(world_def world_gnu.def)
   elseif(CMAKE_Fortran_COMPILER_ID MATCHES "Intel" OR
diff --git a/Tests/IncludeDirectories/CMakeLists.txt b/Tests/IncludeDirectories/CMakeLists.txt
index d4c19c79b5..4737b71c61 100644
--- a/Tests/IncludeDirectories/CMakeLists.txt
+++ b/Tests/IncludeDirectories/CMakeLists.txt
@@ -88,7 +88,7 @@ if(NOT CMAKE_GENERATOR MATCHES "Visual Studio 9 2008|Watcom WMake")
   # The vcproj format separates values with ','.
   string(APPEND special_chars ",")
 endif()
-if(NOT WIN32 AND NOT CYGWIN)
+if(NOT WIN32 AND NOT CYGWIN AND NOT MSYS)
   string(APPEND special_chars "*?<>")
 endif()
 set(special_dir "${CMAKE_CURRENT_BINARY_DIR}/special-${special_chars}-include")
diff --git a/Tests/Jump/Library/Shared/CMakeLists.txt b/Tests/Jump/Library/Shared/CMakeLists.txt
index a37299a799..894f68796e 100644
--- a/Tests/Jump/Library/Shared/CMakeLists.txt
+++ b/Tests/Jump/Library/Shared/CMakeLists.txt
@@ -1,6 +1,6 @@
 add_library(jumpShared SHARED jumpShared.cxx)
 
-if(WIN32 OR CYGWIN)
+if(WIN32 OR CYGWIN OR MSYS)
   set(SHARED_MUST_BE_IN_EXE_DIR 1)
 endif()
 
diff --git a/Tests/PerConfig/CMakeLists.txt b/Tests/PerConfig/CMakeLists.txt
index 7f461b0ecb..9e6f2460c7 100644
--- a/Tests/PerConfig/CMakeLists.txt
+++ b/Tests/PerConfig/CMakeLists.txt
@@ -9,7 +9,7 @@ set_property(TARGET pcShared PROPERTY RELEASE_POSTFIX -opt)
 set_property(TARGET pcShared PROPERTY DEBUG_POSTFIX -dbg)
 set_property(TARGET pcShared PROPERTY VERSION 1.2)
 set_property(TARGET pcShared PROPERTY SOVERSION 3)
-if(UNIX AND NOT CYGWIN)
+if(UNIX AND NOT CYGWIN AND NOT MSYS)
   set(soname_file -DpcShared_soname_file=$<TARGET_SONAME_FILE:pcShared>)
 endif()
 add_executable(perconfig perconfig.c)
diff --git a/Tests/RunCMake/CMakeLists.txt b/Tests/RunCMake/CMakeLists.txt
index 91fe6ca713..1f8ea0c6f7 100644
--- a/Tests/RunCMake/CMakeLists.txt
+++ b/Tests/RunCMake/CMakeLists.txt
@@ -668,7 +668,7 @@ add_RunCMake_test(CrosscompilingEmulator
  -DPSEUDO_EMULATOR_CUSTOM_COMMAND=$<TARGET_FILE:pseudo_emulator_custom_command>
  -DPSEUDO_EMULATOR_CUSTOM_COMMAND_ARG=$<TARGET_FILE:pseudo_emulator_custom_command_arg>)
 if("${CMAKE_GENERATOR}" MATCHES "Make|Ninja")
-  if(UNIX AND NOT CYGWIN)
+  if(UNIX AND NOT CYGWIN AND NOT MSYS)
     execute_process(COMMAND ldd --help
       OUTPUT_VARIABLE LDD_HELP
       ERROR_VARIABLE LDD_ERR)
diff --git a/Tests/RunCMake/CommandLine/RunCMakeTest.cmake b/Tests/RunCMake/CommandLine/RunCMakeTest.cmake
index 51754fc616..ae5057f716 100644
--- a/Tests/RunCMake/CommandLine/RunCMakeTest.cmake
+++ b/Tests/RunCMake/CommandLine/RunCMakeTest.cmake
@@ -772,7 +772,7 @@ function(reject_fifo)
     run_cmake_command(reject_fifo ${BASH_EXECUTABLE} -c ${BASH_COMMAND_ARGUMENT})
   endif()
 endfunction()
-if(CMAKE_HOST_UNIX AND NOT CMAKE_SYSTEM_NAME STREQUAL "CYGWIN")
+if(CMAKE_HOST_UNIX AND NOT CMAKE_SYSTEM_NAME STREQUAL "CYGWIN" NOT CMAKE_SYSTEM_NAME STREQUAL "MSYS")
   reject_fifo()
   run_cmake_command(closed_stdin  sh -c "\"${CMAKE_COMMAND}\" --version <&-")
   run_cmake_command(closed_stdout sh -c "\"${CMAKE_COMMAND}\" --version >&-")
diff --git a/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake b/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake
index 7182cdf767..74de5e5346 100644
--- a/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake
+++ b/Tests/RunCMake/GenerateExportHeader/GEH-failures.cmake
@@ -5,7 +5,7 @@ file(WRITE ${failure_test_executables} "")
 # Check if we should do anything. If the compiler doesn't support hidden
 # visibility, the failure tests won't fail, so just write an empty targets
 # list and punt.
-if(NOT WIN32 AND NOT CYGWIN AND NOT COMPILER_HAS_HIDDEN_VISIBILITY)
+if(NOT WIN32 AND NOT CYGWIN AND NOT MSYS AND NOT COMPILER_HAS_HIDDEN_VISIBILITY)
   return()
 endif()
 
diff --git a/Tests/RunCMake/GenerateExportHeader/GEH.cmake b/Tests/RunCMake/GenerateExportHeader/GEH.cmake
index 431d1ce406..129a45230c 100644
--- a/Tests/RunCMake/GenerateExportHeader/GEH.cmake
+++ b/Tests/RunCMake/GenerateExportHeader/GEH.cmake
@@ -102,13 +102,13 @@ endif()
 add_executable(GenerateExportHeader exportheader_test.cpp)
 
 target_link_libraries(GenerateExportHeader ${link_libraries})
-if (WIN32 OR CYGWIN)
+if (WIN32 OR CYGWIN OR MSYS)
   if((CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "IntelLLVM") AND
     CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC")
     set(_platform Win32-Clang)
   elseif(MSVC AND COMPILER_HAS_DEPRECATED)
     set(_platform Win32)
-  elseif((MINGW OR CYGWIN) AND COMPILER_HAS_DEPRECATED)
+  elseif((MINGW OR CYGWIN OR MSYS) AND COMPILER_HAS_DEPRECATED)
     set(_platform MinGW)
   else()
     set(_platform WinEmpty)
diff --git a/Tests/RunCMake/file/RunCMakeTest.cmake b/Tests/RunCMake/file/RunCMakeTest.cmake
index 22813eb163..e865f1350a 100644
--- a/Tests/RunCMake/file/RunCMakeTest.cmake
+++ b/Tests/RunCMake/file/RunCMakeTest.cmake
@@ -63,7 +63,7 @@ run_cmake(GLOB-noexp-RELATIVE)
 run_cmake_command(GLOB-error-CONFIGURE_DEPENDS-SCRIPT_MODE ${CMAKE_COMMAND} -P
   ${RunCMake_SOURCE_DIR}/GLOB-error-CONFIGURE_DEPENDS-SCRIPT_MODE.cmake)
 
-if(NOT WIN32 OR CYGWIN)
+if(NOT WIN32 OR CYGWIN OR MSYS)
   run_cmake(CREATE_LINK-SYMBOLIC)
   run_cmake(CREATE_LINK-SYMBOLIC-noexist)
   run_cmake(GLOB_RECURSE-cyclic-recursion)
diff --git a/Tests/RunCMake/find_program/RunCMakeTest.cmake b/Tests/RunCMake/find_program/RunCMakeTest.cmake
index 3e23920317..77c021d185 100644
--- a/Tests/RunCMake/find_program/RunCMakeTest.cmake
+++ b/Tests/RunCMake/find_program/RunCMakeTest.cmake
@@ -6,7 +6,7 @@ run_cmake(NamesPerDir)
 run_cmake(RelAndAbsPath)
 run_cmake(Required)
 
-if(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN)$")
+if(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN|MSYS)$")
   run_cmake(WindowsCom)
   run_cmake(WindowsExe)
 else()
diff --git a/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake b/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake
index 4a55cd6f0f..b84c2922a4 100644
--- a/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake
+++ b/Tests/RunCMake/install/TARGETS-Defaults-Cache-all-check.cmake
@@ -28,6 +28,22 @@ elseif(CYGWIN)
     [[mylib/liblib1\.dll\.a]]
     [[mylib/liblib2\.a]]
     )
+elseif(MSYS)
+  set(_check_files
+    [[lib3]]
+    [[lib3/liblib3\.dll\.a]]
+    [[lib4]]
+    [[lib4/msys-lib4\.dll]]
+    [[mybin]]
+    [[mybin/msys-lib1\.dll]]
+    [[mybin/exe\.exe]]
+    [[myinclude]]
+    [[myinclude/obj4\.h]]
+    [[myinclude/obj5\.h]]
+    [[mylib]]
+    [[mylib/liblib1\.dll\.a]]
+    [[mylib/liblib2\.a]]
+    )
 else()
   set(_check_files
     [[lib3]]
diff --git a/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake b/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake
index 30f2266d18..9316a7ed48 100644
--- a/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake
+++ b/Tests/RunCMake/install/TARGETS-Defaults-all-check.cmake
@@ -32,6 +32,24 @@ elseif(CYGWIN)
     [[lib4]]
     [[lib4/cyglib4\.dll]]
     )
+elseif(MSYS)
+  set(_check_files
+    [[bin]]
+    [[bin/msys-lib1\.dll]]
+    [[bin/exe\.exe]]
+    [[include]]
+    [[include/obj1\.h]]
+    [[include/obj2\.h]]
+    [[include/obj4\.h]]
+    [[include/obj5\.h]]
+    [[lib]]
+    [[lib/liblib1\.dll\.a]]
+    [[lib/liblib2\.a]]
+    [[lib3]]
+    [[lib3/liblib3\.dll\.a]]
+    [[lib4]]
+    [[lib4/msys-lib4\.dll]]
+    )
 else()
   set(_check_files
     [[bin]]
diff --git a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake
index bc9ebd192f..791982fa8d 100644
--- a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake
+++ b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-all-check.cmake
@@ -18,6 +18,16 @@ elseif(CYGWIN)
     [[lib/cygnamelink-uns-1\.dll]]
     [[lib/cygnamelink-uns-dev-1\.dll]]
   )
+elseif(MSYS)
+  set(_check_files
+    [[lib]]
+    [[lib/msys-namelink-none\.dll]]
+    [[lib/msys-namelink-same-1\.dll]]
+    [[lib/msys-namelink-sep-1\.dll]]
+    [[lib/msys-namelink-skip-1\.dll]]
+    [[lib/msys-namelink-uns-1\.dll]]
+    [[lib/msys-namelink-uns-dev-1\.dll]]
+  )
 elseif(APPLE)
   set(_check_files
     [[lib]]
diff --git a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake
index 5396cdbf39..c1f999310b 100644
--- a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake
+++ b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-dev-check.cmake
@@ -1,4 +1,4 @@
-if(WIN32 OR CYGWIN OR NO_NAMELINK)
+if(WIN32 OR CYGWIN OR MSYS OR NO_NAMELINK)
   set(_check_files)
 else()
   set(_check_files
diff --git a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake
index 3f6be686c7..2346487c29 100644
--- a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake
+++ b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-lib-check.cmake
@@ -14,6 +14,14 @@ elseif(CYGWIN)
     [[lib/cygnamelink-sep-1\.dll]]
     [[lib/cygnamelink-skip-1\.dll]]
   )
+elseif(MSYS)
+  set(_check_files
+    [[lib]]
+    [[lib/msys-namelink-none\.dll]]
+    [[lib/msys-namelink-same-1\.dll]]
+    [[lib/msys-namelink-sep-1\.dll]]
+    [[lib/msys-namelink-skip-1\.dll]]
+  )
 elseif(APPLE)
   set(_check_files
     [[lib]]
diff --git a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake
index 0033c88e47..6959a8dfe1 100644
--- a/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake
+++ b/Tests/RunCMake/install/TARGETS-NAMELINK_COMPONENT-uns-check.cmake
@@ -10,6 +10,12 @@ elseif(CYGWIN)
     [[lib/cygnamelink-uns-1\.dll]]
     [[lib/cygnamelink-uns-dev-1\.dll]]
   )
+elseif(MSYS)
+  set(_check_files
+    [[lib]]
+    [[lib/msys-namelink-uns-1\.dll]]
+    [[lib/msys-namelink-uns-dev-1\.dll]]
+  )
 elseif(APPLE)
   set(_check_files
     [[lib]]
diff --git a/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake b/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake
index 5daecc815d..01cfde6a01 100644
--- a/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake
+++ b/Tests/RunCMake/install/TARGETS-OUTPUT_NAME-all-check.cmake
@@ -6,6 +6,8 @@ if(WIN32)
   check_installed("^bin;(${libtest45};${test123})|(${test123};${test45})\$")
 elseif(CYGWIN)
   check_installed([[^bin;bin/cygtest4\.dll;bin/libtest4\.dll\.a;bin/libtest5ar\.a;bin/test1out\.exe;bin/test2deb\.exe;bin/test3exc\.exe$]])
+elseif(MSYS)
+  check_installed([[^bin;bin/msys-test4\.dll;bin/libtest4\.dll\.a;bin/libtest5ar\.a;bin/test1out\.exe;bin/test2deb\.exe;bin/test3exc\.exe$]])
 elseif(APPLE)
   check_installed([[^bin;bin/libtest4lib\.dylib;bin/libtest5ar\.a;bin/test1out;bin/test2deb;bin/test3exc$]])
 else()
diff --git a/Utilities/cmlibarchive/CMakeLists.txt b/Utilities/cmlibarchive/CMakeLists.txt
index 689d98afb9..f3717b014f 100644
--- a/Utilities/cmlibarchive/CMakeLists.txt
+++ b/Utilities/cmlibarchive/CMakeLists.txt
@@ -370,7 +370,7 @@ ENDMACRO (INSTALL_MAN __mans)
 #
 MACRO (TRY_MACRO_FOR_LIBRARY INCLUDES LIBRARIES
        TRY_TYPE SAMPLE_SOURCE MACRO_LIST)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     CMAKE_PUSH_CHECK_STATE()	# Save the state of the variables
     SET(CMAKE_REQUIRED_INCLUDES ${INCLUDES})
     SET(CMAKE_REQUIRED_LIBRARIES ${LIBRARIES})
@@ -395,15 +395,15 @@ MACRO (TRY_MACRO_FOR_LIBRARY INCLUDES LIBRARIES
           "Macro ${VAR} is checked with")
     ENDFOREACH(VAR)
     CMAKE_POP_CHECK_STATE()	# Restore the state of the variables
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ENDMACRO (TRY_MACRO_FOR_LIBRARY)
 #
 # Check compress/decompress libraries
 #
-IF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)
+IF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN AND NOT MSYS)
   # GnuWin32 is only for Win32, not Win64.
   SET(__GNUWIN32PATH "C:/Program Files/GnuWin32")
-ENDIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN AND NOT MSYS)
 IF(DEFINED __GNUWIN32PATH AND EXISTS "${__GNUWIN32PATH}")
   # You have to add a path availabel DLL file into PATH environment variable.
   # Maybe DLL path is "C:/Program Files/GnuWin32/bin".
@@ -446,7 +446,7 @@ IF(ZLIB_FOUND)
   SET(HAVE_ZLIB_H 1)
   INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
   LIST(APPEND ADDITIONAL_LIBS ${ZLIB_LIBRARIES})
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     #
     # Test if ZLIB_WINAPI macro is needed to use.
     #
@@ -468,7 +468,7 @@ IF(ZLIB_FOUND)
         ADD_DEFINITIONS(-DZLIB_DLL)
       ENDIF(ZLIB_DLL)
     ENDIF(ZLIB_WINAPI)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ELSE(ZLIB_FOUND)
   MESSAGE(FATAL_ERROR "CMake requires zlib to be available to libarchive")
 ENDIF(ZLIB_FOUND)
@@ -958,7 +958,7 @@ ENDMACRO(CHECK_CRYPTO ALGORITHMS IMPLEMENTATION)
 # of Windows XP do not support SHA256, SHA384 and SHA512.
 #
 MACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     FOREACH(CRYPTO ${CRYPTO_LIST})
       IF(NOT ARCHIVE_CRYPTO_${CRYPTO})
       IF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)
@@ -1025,7 +1025,7 @@ main(int argc, char **argv)
       ENDIF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)
       ENDIF(NOT ARCHIVE_CRYPTO_${CRYPTO})
     ENDFOREACH(CRYPTO)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ENDMACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)
 
 #
@@ -1130,7 +1130,7 @@ IF(ENABLE_ICONV)
     FIND_LIBRARY(LIBCHARSET_PATH NAMES charset libcharset)
     IF(LIBCHARSET_PATH)
       SET(CMAKE_REQUIRED_LIBRARIES ${LIBCHARSET_PATH})
-      IF(WIN32 AND NOT CYGWIN)
+      IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
         # Test if a macro is needed for the library.
         TRY_MACRO_FOR_LIBRARY(
           "${ICONV_INCLUDE_DIR}" "${LIBCHARSET_PATH}"
@@ -1144,9 +1144,9 @@ IF(ENABLE_ICONV)
           SET(HAVE_LOCALE_CHARSET ON CACHE INTERNAL
               "Have function locale_charset")
         ENDIF(WITHOUT_LIBCHARSET_STATIC OR LIBCHARSET_STATIC)
-      ELSE(WIN32 AND NOT CYGWIN)
+      ELSE(WIN32 AND NOT CYGWIN AND NOT MSYS)
         CHECK_FUNCTION_EXISTS_GLIBC(locale_charset HAVE_LOCALE_CHARSET)
-      ENDIF(WIN32 AND NOT CYGWIN)
+      ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
       IF(HAVE_LOCALE_CHARSET)
         LIST(APPEND ADDITIONAL_LIBS ${LIBCHARSET_PATH})
       ENDIF(HAVE_LOCALE_CHARSET)
@@ -1985,7 +1985,7 @@ ENDIF()
 #
 # Register installation of PDF documents.
 #
-IF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
   #
   # On Windows platform, It's better that we install PDF documents
   # on one's computer.
@@ -1997,7 +1997,7 @@ IF(WIN32 AND NOT CYGWIN)
             FILES_MATCHING PATTERN "*.pdf"
     )
   ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/pdf)
-ENDIF(WIN32 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 #
 #
 #
diff --git a/Utilities/cmlibarchive/libarchive/CMakeLists.txt b/Utilities/cmlibarchive/libarchive/CMakeLists.txt
index 891a140676..0702698783 100644
--- a/Utilities/cmlibarchive/libarchive/CMakeLists.txt
+++ b/Utilities/cmlibarchive/libarchive/CMakeLists.txt
@@ -211,14 +211,14 @@ SET(libarchive_MANS
   tar.5
 )
 
-IF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
   LIST(APPEND libarchive_SOURCES archive_entry_copy_bhfi.c)
   LIST(APPEND libarchive_SOURCES archive_read_disk_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.h)
   LIST(APPEND libarchive_SOURCES archive_write_disk_windows.c)
   LIST(APPEND libarchive_SOURCES filter_fork_windows.c)
-ENDIF(WIN32 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 
 IF(ARCHIVE_BLAKE2)
   LIST(APPEND libarchive_SOURCES archive_blake2sp_ref.c)
@@ -252,9 +252,9 @@ TARGET_LINK_LIBRARIES(archive_static ${ADDITIONAL_LIBS})
 SET_TARGET_PROPERTIES(archive_static PROPERTIES COMPILE_DEFINITIONS
   LIBARCHIVE_STATIC)
 # On Posix systems, libarchive.so and libarchive.a can co-exist.
-IF(NOT WIN32 OR CYGWIN)
+IF(NOT WIN32 OR CYGWIN OR MSYS)
   SET_TARGET_PROPERTIES(archive_static PROPERTIES OUTPUT_NAME archive)
-ENDIF(NOT WIN32 OR CYGWIN)
+ENDIF(NOT WIN32 OR CYGWIN OR MSYS)
 
 IF(ENABLE_INSTALL)
   # How to install the libraries
diff --git a/Utilities/cmlibuv/CMakeLists.txt b/Utilities/cmlibuv/CMakeLists.txt
index f8b47af467..0dfad51858 100644
--- a/Utilities/cmlibuv/CMakeLists.txt
+++ b/Utilities/cmlibuv/CMakeLists.txt
@@ -156,7 +156,7 @@ if(CMAKE_SYSTEM_NAME STREQUAL "OS400")
     )
 endif()
 
-if(CMAKE_SYSTEM_NAME MATCHES "CYGWIN")
+if(CMAKE_SYSTEM_NAME MATCHES "CYGWIN" OR CMAKE_SYSTEM_NAME MATCHES "MSYS")
   list(APPEND uv_libraries
     )
   list(APPEND uv_headers
diff --git a/bootstrap b/bootstrap
index f85d57ee37..06913644d7 100755
--- a/bootstrap
+++ b/bootstrap
@@ -96,8 +96,15 @@ else
   cmake_system_cygwin=false
 fi
 
+# Determine whether this is a MSYS environment.
+if echo "${cmake_system}" | grep MSYS >/dev/null 2>&1; then
+  cmake_system_msys=true
+else
+  cmake_system_msys=false
+fi
+
 # Determine whether this is a MinGW environment.
-if echo "${cmake_system}" | grep 'MINGW\|MSYS' >/dev/null 2>&1; then
+if echo "${cmake_system}" | grep 'MINGW' >/dev/null 2>&1; then
   cmake_system_mingw=true
 else
   cmake_system_mingw=false
@@ -1070,6 +1077,10 @@ if ${cmake_system_cygwin}; then
   cmake_ld_flags="${LDFLAGS} -Wl,--enable-auto-import"
 fi
 
+if ${cmake_system_msys}; then
+  cmake_ld_flags="${LDFLAGS} -Wl,--enable-auto-import"
+fi
+
 # Add CoreFoundation framework on Darwin
 if ${cmake_system_darwin}; then
   cmake_ld_flags="${LDFLAGS} -framework CoreFoundation"
@@ -1091,6 +1102,7 @@ cmake_toolchains=''
 case "${cmake_system}" in
   *AIX*)   cmake_toolchains='XL GNU' ;;
   *CYGWIN*) cmake_toolchains='GNU' ;;
+  *MSYS*) cmake_toolchains='GNU' ;;
   *Darwin*) cmake_toolchains='Clang GNU' ;;
   *Linux*) cmake_toolchains='GNU Clang XL PGI PathScale' ;;
   *MINGW*) cmake_toolchains='GNU' ;;
-- 
2.31.0.windows.1.1.g431bb406d8

