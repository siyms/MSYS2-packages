From 81c534afc411d980e8d85a6ef72b1f3b6a7a91eb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Mateusz=20Miku=C5=82a?= <mati865@gmail.com>
Date: Thu, 29 Oct 2020 18:42:31 +0100
Subject: Msysize

---
 CMakeLists.txt                                | 4 ++--
 examples/AnnotateFunctions/CMakeLists.txt     | 2 +-
 examples/Attribute/CMakeLists.txt             | 2 +-
 examples/PrintFunctionNames/CMakeLists.txt    | 2 +-
 test/CodeGen/2003-08-21-WideString.c          | 2 +-
 test/CodeGen/2009-07-15-pad-wchar_t-array.c   | 2 +-
 test/CodeGen/extern-weak.c                    | 5 +++--
 test/CodeGen/wchar-const.c                    | 2 +-
 test/Sema/return.c                            | 2 +-
 test/Sema/wchar.c                             | 2 +-
 test/lit.cfg.py                               | 4 ++--
 tools/CMakeLists.txt                          | 2 +-
 tools/driver/CMakeLists.txt                   | 2 +-
 tools/libclang/CIndexer.cpp                   | 4 ++--
 tools/scan-build-py/libear/__init__.py        | 2 +-
 tools/scan-build-py/libscanbuild/intercept.py | 2 +-
 tools/scan-build/CMakeLists.txt               | 2 +-
 17 files changed, 22 insertions(+), 21 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2e06c5fd902..7bc1cbdf9d5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -98,7 +98,7 @@ if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR )
   # They are used as destination of target generators.
   set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)
   set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX})
-  if(WIN32 OR CYGWIN)
+  if(WIN32 OR CYGWIN OR MSYS)
     # DLL platform -- put DLLs into bin.
     set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR})
   else()
@@ -214,7 +214,7 @@ if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR )
       set(LLVM_LIT_ARGS "${LIT_ARGS_DEFAULT}" CACHE STRING "Default options for lit")
 
       # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.
-      if( WIN32 AND NOT CYGWIN )
+      if( WIN32 AND NOT CYGWIN OR MSYS )
         set(LLVM_LIT_TOOLS_DIR "" CACHE PATH "Path to GnuWin32 tools")
       endif()
     else()
diff --git a/examples/AnnotateFunctions/CMakeLists.txt b/examples/AnnotateFunctions/CMakeLists.txt
index e9850b64f08..c10584f747a 100644
--- a/examples/AnnotateFunctions/CMakeLists.txt
+++ b/examples/AnnotateFunctions/CMakeLists.txt
@@ -1,6 +1,6 @@
 add_llvm_library(AnnotateFunctions MODULE AnnotateFunctions.cpp PLUGIN_TOOL clang)
 
-if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN))
+if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN OR MSYS))
   set(LLVM_LINK_COMPONENTS
     Support
   )
diff --git a/examples/Attribute/CMakeLists.txt b/examples/Attribute/CMakeLists.txt
index ed02f5e5992..0218a379a28 100644
--- a/examples/Attribute/CMakeLists.txt
+++ b/examples/Attribute/CMakeLists.txt
@@ -1,6 +1,6 @@
 add_llvm_library(Attribute MODULE Attribute.cpp PLUGIN_TOOL clang)
 
-if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN))
+if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN OR MSYS))
   target_link_libraries(Attribute PRIVATE
     clangAST
     clangBasic
diff --git a/examples/PrintFunctionNames/CMakeLists.txt b/examples/PrintFunctionNames/CMakeLists.txt
index 63b0c015732..df5165de3de 100644
--- a/examples/PrintFunctionNames/CMakeLists.txt
+++ b/examples/PrintFunctionNames/CMakeLists.txt
@@ -11,7 +11,7 @@ endif()
 
 add_llvm_library(PrintFunctionNames MODULE PrintFunctionNames.cpp PLUGIN_TOOL clang)
 
-if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN))
+if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN OR MSYS))
   set(LLVM_LINK_COMPONENTS
     Support
   )
diff --git a/test/CodeGen/2003-08-21-WideString.c b/test/CodeGen/2003-08-21-WideString.c
index 1a6e5b7c882..0b1c9933f83 100644
--- a/test/CodeGen/2003-08-21-WideString.c
+++ b/test/CodeGen/2003-08-21-WideString.c
@@ -3,7 +3,7 @@
 // This bit is taken from Sema/wchar.c so we can avoid the wchar.h include.
 typedef __WCHAR_TYPE__ wchar_t;
 #if defined(_WIN32) || defined(_M_IX86) || defined(__CYGWIN__) \
-  || defined(_M_X64) || defined(SHORT_WCHAR)
+  || defined(_M_X64) || defined(SHORT_WCHAR) || defined(__MSYS__)
   #define WCHAR_T_TYPE unsigned short
 #elif defined(__sun)
   #define WCHAR_T_TYPE long
diff --git a/test/CodeGen/2009-07-15-pad-wchar_t-array.c b/test/CodeGen/2009-07-15-pad-wchar_t-array.c
index 4ae35158fa8..086c6de86de 100644
--- a/test/CodeGen/2009-07-15-pad-wchar_t-array.c
+++ b/test/CodeGen/2009-07-15-pad-wchar_t-array.c
@@ -3,7 +3,7 @@
 // This bit is taken from Sema/wchar.c so we can avoid the wchar.h include.
 typedef __WCHAR_TYPE__ wchar_t;
 #if defined(_WIN32) || defined(_M_IX86) || defined(__CYGWIN__) \
-  || defined(_M_X64) || defined(SHORT_WCHAR)
+  || defined(_M_X64) || defined(SHORT_WCHAR) || defined(__MSYS__)
   #define WCHAR_T_TYPE unsigned short
 #elif defined(__sun)
   #define WCHAR_T_TYPE long
diff --git a/test/CodeGen/extern-weak.c b/test/CodeGen/extern-weak.c
index 6a78a33af65..15dc76b4c59 100644
--- a/test/CodeGen/extern-weak.c
+++ b/test/CodeGen/extern-weak.c
@@ -1,8 +1,9 @@
 // RUN: %clang_cc1 -O3 -emit-llvm -o - %s | grep extern_weak
 // RUN: %clang_cc1 -O3 -emit-llvm -o - %s | llc
 
-#if !defined(__linux__) && !defined(__FreeBSD__) && \
-    !defined(__OpenBSD__) && !defined(__CYGWIN__) && !defined(__DragonFly__)
+#if !defined(__linux__) && !defined(__FreeBSD__) &&                             \
+    !defined(__OpenBSD__) && !defined(__CYGWIN__) && !defined(__DragonFly__) && \
+    !defined(__MSYS__)
 void foo() __attribute__((weak_import));
 #else
 void foo() __attribute__((weak));
diff --git a/test/CodeGen/wchar-const.c b/test/CodeGen/wchar-const.c
index 91b14ecc102..4a103a6ea03 100644
--- a/test/CodeGen/wchar-const.c
+++ b/test/CodeGen/wchar-const.c
@@ -5,7 +5,7 @@
 // This bit is taken from Sema/wchar.c so we can avoid the wchar.h include.
 typedef __WCHAR_TYPE__ wchar_t;
 #if defined(_WIN32) || defined(_M_IX86) || defined(__CYGWIN__) \
-  || defined(_M_X64) || defined(SHORT_WCHAR)
+  || defined(_M_X64) || defined(SHORT_WCHAR) || defined(__MSYS__)
   #define WCHAR_T_TYPE unsigned short
 #elif defined(__sun)
   #define WCHAR_T_TYPE long
diff --git a/test/Sema/return.c b/test/Sema/return.c
index 632d3430c30..0002e7d4c11 100644
--- a/test/Sema/return.c
+++ b/test/Sema/return.c
@@ -209,7 +209,7 @@ int test30() {
   if (j)
     longjmp(test30_j, 1);
   else
-#if defined(_WIN32) || defined(_WIN64) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(_WIN64) || defined(__CYGWIN__) || defined(__MSYS__)
     longjmp(test30_j, 2);
 #else
     _longjmp(test30_j, 1);
diff --git a/test/Sema/wchar.c b/test/Sema/wchar.c
index 6a4b75b39fd..a2b1a18d427 100644
--- a/test/Sema/wchar.c
+++ b/test/Sema/wchar.c
@@ -4,7 +4,7 @@
 typedef __WCHAR_TYPE__ wchar_t;
 
 #if defined(_WIN32) || defined(_M_IX86) || defined(__CYGWIN__) \
- || defined(_M_X64) || defined(__ORBIS__) || defined(SHORT_WCHAR)
+  || defined(_M_X64) || defined(__ORBIS__) || defined(SHORT_WCHAR) || defined(__MSYS__)
   #define WCHAR_T_TYPE unsigned short
 #elif defined(__arm) || defined(__aarch64__)
   #define WCHAR_T_TYPE unsigned int
diff --git a/test/lit.cfg.py b/test/lit.cfg.py
index dacda6894a0..dd35dc83b8c 100644
--- a/test/lit.cfg.py
+++ b/test/lit.cfg.py
@@ -142,7 +142,7 @@ if is_filesystem_case_insensitive():
     config.available_features.add('case-insensitive-filesystem')
 
 # Tests that require the /dev/fd filesystem.
-if os.path.exists('/dev/fd/0') and sys.platform not in ['cygwin']:
+if os.path.exists('/dev/fd/0') and sys.platform not in ['cygwin', 'msys']:
     config.available_features.add('dev-fd-fs')
 
 # Set on native MS environment.
@@ -154,7 +154,7 @@ if not re.match(r'^x86_64.*-(windows-msvc|windows-gnu)$', config.target_triple):
     config.available_features.add('LP64')
 
 # [PR12920] "clang-driver" -- set if gcc driver is not used.
-if not re.match(r'.*-(cygwin)$', config.target_triple):
+if not re.match(r'.*-(cygwin|msys)$', config.target_triple):
     config.available_features.add('clang-driver')
 
 # Tests that are specific to the Apple Silicon macOS.
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 85a85812a8d..84d9bd60fde 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -15,7 +15,7 @@ add_clang_subdirectory(c-index-test)
 
 add_clang_subdirectory(clang-rename)
 add_clang_subdirectory(clang-refactor)
-if(UNIX OR MINGW)
+if(UNIX OR MINGW OR MSYS)
   add_clang_subdirectory(clang-shlib)
 endif()
 
diff --git a/tools/driver/CMakeLists.txt b/tools/driver/CMakeLists.txt
index c53485ef195..524b03e8364 100644
--- a/tools/driver/CMakeLists.txt
+++ b/tools/driver/CMakeLists.txt
@@ -49,7 +49,7 @@ clang_target_link_libraries(clang
   clangSerialization
   )
 
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT (CYGWIN OR MSYS))
   # Prevent versioning if the buildhost is targeting for Win32.
 else()
   set_target_properties(clang PROPERTIES VERSION ${CLANG_EXECUTABLE_VERSION})
diff --git a/tools/libclang/CIndexer.cpp b/tools/libclang/CIndexer.cpp
index 3d8c00cf211..0f02a333dcb 100644
--- a/tools/libclang/CIndexer.cpp
+++ b/tools/libclang/CIndexer.cpp
@@ -25,7 +25,7 @@
 #include <cstdio>
 #include <mutex>
 
-#ifdef __CYGWIN__
+#if defined(__CYGWIN__) || defined(__MSYS__)
 #include <cygwin/version.h>
 #include <sys/cygwin.h>
 #define _WIN32 1
@@ -111,7 +111,7 @@ const std::string &CIndexer::getClangResourcesPath() {
                sizeof(mbi));
   GetModuleFileNameA((HINSTANCE)mbi.AllocationBase, path, MAX_PATH);
 
-#ifdef __CYGWIN__
+#if defined(__CYGWIN__) || defined(__MSYS__)
   char w32path[MAX_PATH];
   strcpy(w32path, path);
 #if CYGWIN_VERSION_API_MAJOR > 0 || CYGWIN_VERSION_API_MINOR >= 181
diff --git a/tools/scan-build-py/libear/__init__.py b/tools/scan-build-py/libear/__init__.py
index 0dfe8c11eba..b46c202ab68 100644
--- a/tools/scan-build-py/libear/__init__.py
+++ b/tools/scan-build-py/libear/__init__.py
@@ -149,7 +149,7 @@ class LinuxToolset(UnixToolset):
 
 def make_toolset(src_dir):
     platform = sys.platform
-    if platform in {'win32', 'cygwin'}:
+    if platform in {'win32', 'cygwin', 'msys'}:
         raise RuntimeError('not implemented on this platform')
     elif platform == 'darwin':
         return DarwinToolset(src_dir)
diff --git a/tools/scan-build-py/libscanbuild/intercept.py b/tools/scan-build-py/libscanbuild/intercept.py
index 70f3233f5e8..c6951cf6d20 100644
--- a/tools/scan-build-py/libscanbuild/intercept.py
+++ b/tools/scan-build-py/libscanbuild/intercept.py
@@ -44,7 +44,7 @@ US = chr(0x1f)
 COMPILER_WRAPPER_CC = 'intercept-cc'
 COMPILER_WRAPPER_CXX = 'intercept-c++'
 TRACE_FILE_EXTENSION = '.cmd'  # same as in ear.c
-WRAPPER_ONLY_PLATFORMS = frozenset({'win32', 'cygwin'})
+WRAPPER_ONLY_PLATFORMS = frozenset({'win32', 'cygwin', 'msys'})
 
 
 @command_entry_point
diff --git a/tools/scan-build/CMakeLists.txt b/tools/scan-build/CMakeLists.txt
index ec0702d76f1..ba68989136d 100644
--- a/tools/scan-build/CMakeLists.txt
+++ b/tools/scan-build/CMakeLists.txt
@@ -2,7 +2,7 @@ option(CLANG_INSTALL_SCANBUILD "Install the scan-build tool" ON)
 
 include(GNUInstallDirs)
 
-if (WIN32 AND NOT CYGWIN)
+if (WIN32 AND NOT (CYGWIN OR MSYS))
   set(BinFiles
         scan-build
         scan-build.bat
-- 
2.29.0.windows.1

